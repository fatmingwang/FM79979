https://cmake.org/cmake/help/latest/manual/cmake-language.7.html


===============================================================
# set the project name and version
project(Tutorial VERSION 1.0)

===============================================================
# specify the C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)


===============================================================
#https://cmake.org/cmake/help/latest/command/configure_file.html
#Copy a file to another location and modify its contents.
# configure a header file to pass some of the CMake settings
# to the source code
# put TutorialConfig.h.in file at same folder with CMakeLists.txt,cmake will generate a TutorialConfig.h file
configure_file(TutorialConfig.h.in TutorialConfig.h)


TutorialConfig.h.in file content
// the configured options and settings for Tutorial
#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@

TutorialConfig.h file wiil be generated by cmake
here is the content
// the configured options and settings for Tutorial
#define Tutorial_VERSION_MAJOR 1
#define Tutorial_VERSION_MINOR 0

===============================================================
# add the executable where main function is
add_executable(Tutorial tutorial.cxx)

===============================================================
https://stackoverflow.com/questions/31969547/what-is-the-difference-between-include-directories-and-target-include-directorie
include_directories(x/y) 
	affects directory scope. All targets in this CMakeList, as well as those in all subdirectories added after the point of its call, will 	have the path x/y added to their include path.(all CMakeLists file will be effected)
target_include_directories(t x/y) 
	has target scopeâ€”it adds x/y to the include path for target.(only target CMakeLists file will be effected)

# add the binary tree to the search path for include files
# so that we will find TutorialConfig.h
# if excutable file(cmake-3.20.0-rc1\Help\guide\tutorial\Step2\tutorial.cxx) include TutorialConfig.h,
# it must add include directories to found TutorialConfig.h.
target_include_directories(Tutorial PUBLIC "${PROJECT_BINARY_DIR}" )

===============================================================
# should we use our own math functions
# in the CMakeLists make a options and make it on or off
# it also can be do with arguments:  cmake ../Step2 -DUSE_MYMATH=OFF
option(USE_MYMATH "Use tutorial provided math implementation" ON)


#in the other file(TutorialConfig.h.in)if option is on(#define USE_MYMATH) if off(/* #undef USE_MYMATH */)
#cmakedefine USE_MYMATH


===============================================================
add_subdirectory(MathFunctions)
Adds a subdirectory to the build
The source_dir specifies the directory in which the source CMakeLists.txt and code files are located.

===============================================================
list(APPEND EXTRA_LIBS MathFunctions)
list with APPEND  make content add into list
add MathFunctions add into EXTRA_LIBS list


# add the MathFunctions library
if(USE_MYMATH)
	#add this folder and there is a CMakeLists.txt in this folder
  add_subdirectory(MathFunctions)
	#try to link MathFunctions.lib
  list(APPEND EXTRA_LIBS MathFunctions)
	#add MathFunctions directory as additional directories for project.
  list(APPEND EXTRA_INCLUDES "${PROJECT_SOURCE_DIR}/MathFunctions")
endif()



===============================================================
# state that anybody linking to us needs to include the current source dir
# to find MathFunctions.h, while we don't.
target_include_directories(MathFunctions INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} )




