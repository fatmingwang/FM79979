<UserControl x:Class="CoreWPF.Common.FMTreeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:my="clr-namespace:CoreWPF.Common"
             mc:Ignorable="d" >
    <UserControl.Resources>
        <my:TreeViewLineConverter x:Key="LineConverter"/>
        <!-- Toggle Button -->
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid Width="15" Height="13" SnapsToDevicePixels="True">
                            <Rectangle Width="9" Height="9" Stroke="#919191" SnapsToDevicePixels="true">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,2" StartPoint="0.5,0">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="Silver" Offset="0.5"/>
                                        <GradientStop Color="LightGray" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="ExpandPath" Width="1" Height="5" Stroke="Black" SnapsToDevicePixels="true"/>
                            <Rectangle Width="5" Height="1" Stroke="Black" SnapsToDevicePixels="true"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Visibility"  TargetName="ExpandPath" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- TreeViewItem -->
        <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <!-- Connecting Lines -->
                            <Rectangle x:Name="HorLn" Margin="9,1,0,0" Height="1" Stroke="#DCDCDC" SnapsToDevicePixels="True"/>
                            <Rectangle x:Name="VerLn" Width="1" Stroke="#DCDCDC" Margin="0,0,1,0" Grid.RowSpan="2" SnapsToDevicePixels="true" Fill="White"/>
                            <ToggleButton Margin="-1,0,0,0" x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                            <Border Name="Bd" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" MinWidth="20"/>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- This trigger changes the connecting lines if the item is the last in the list -->
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}" Value="true">
                                <Setter TargetName="VerLn" Property="Height" Value="9"/>
                                <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top"/>
                            </DataTrigger>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Width" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Height" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                            </MultiTrigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Background" Value="Green"/>
                                <Setter Property="Foreground" Value="White"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <TreeView x:Name="m_Treeview" x:FieldModifier="public" AllowDrop="True" MouseDown="MyMouseLeftButtonDown" MouseMove="treeView_MouseMove" DragOver="treeView_DragOver" Drop="treeView_Drop">
        <!--<TreeViewItem>
            <ItemsControl>
                <my:EditableListbox />
            </ItemsControl>
        </TreeViewItem>-->
        <TreeViewItem Header="Root" x:Name="m_Test" >
            <TreeViewItem Header="Coke1" x:Name="m_Test2" Margin="0,0,0,0"></TreeViewItem>
            <TreeViewItem Header="Pepsi1"></TreeViewItem>
            <TreeViewItem Header="Orange1 Juice"></TreeViewItem>
        </TreeViewItem>
        <TreeViewItem Header="Root2" >
            <TreeViewItem Header="Coke2"></TreeViewItem>
            <TreeViewItem Header="Pepsi2"></TreeViewItem>
            <TreeViewItem Header="Orange2 Juice"></TreeViewItem>
        </TreeViewItem>
        <TreeViewItem Header="Root3" >
            <TreeViewItem Header="Coke3"></TreeViewItem>
            <TreeViewItem Header="Pepsi3"></TreeViewItem>
            <TreeViewItem Header="Orange3 Juice"></TreeViewItem>
        </TreeViewItem>
        <TreeView.ContextMenu>
            <ContextMenu>
                <MenuItem Click="MenuItem_Click" x:FieldModifier="public" x:Name="m_AddElementMenuItem" Header="AddElement">
                    <!--<MenuItem.Icon>
                        <Image Source="Images/cut.png" />
                    </MenuItem.Icon>-->
                </MenuItem>
                <MenuItem Click="MenuItem_Click" x:FieldModifier="public" x:Name="m_AddChildMenuItem" Header="AddChild" />
                <MenuItem Click="MenuItem_Click" x:FieldModifier="public" x:Name="m_DeleteMenuItem" Header="Delete"/>
                <MenuItem Click="MenuItem_Click" x:FieldModifier="public" x:Name="m_CopyMenuItem" Header="Copy" />
                <MenuItem Click="MenuItem_Click" x:FieldModifier="public" x:Name="m_CutMenuItem" Header="Cut"/>
                <MenuItem Click="MenuItem_Click" x:FieldModifier="public" x:Name="m_PasteMenuItem" Header="Paste"/>
            </ContextMenu>
        </TreeView.ContextMenu>
        <TreeView.ItemContainerStyle>
            <Style TargetType="{x:Type TreeViewItem}">
                <!-- We have to select the item which is right-clicked on -->
                <!--<EventSetter Event="TreeViewItem.PreviewMouseRightButtonDown" Handler="TreeViewItem_PreviewMouseRightButtonDown"/>-->
                <!--<EventSetter Event="TreeViewItem.Drop" Handler="treeView_Drop"/>-->
                <!--<EventSetter Event="TreeViewItem.MouseMove" Handler="treeView_MouseMove"/>-->
                <Setter Property="MinHeight" Value="15"/>
                <EventSetter Event="TreeViewItem.KeyUp" Handler="treeView_Keyup"/>
                <EventSetter Event="TreeViewItem.PreviewKeyDown" Handler="TreeView_PreviewKeyDown"/>
            </Style>
        </TreeView.ItemContainerStyle>            
    </TreeView>
</UserControl>
