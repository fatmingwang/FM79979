#include "../stdafx.h"
#include "TerrianVertex.h"
#include "../Image/VertexBufferObject.h"
namespace FATMING_CORE
{
	cTerrianVertex::cTerrianVertex(int e_iGridWidth,int e_iGridHeight,Vector2 e_vScale,int64 e_iFVF)
	{
		m_iStride = 0;
		m_i64FVFFormat = e_iFVF;
		m_iStride = GetStrideByFVF(e_iFVF);
		m_pfVertex = 0;
		m_piVectexIndexData = 0;
		m_iGridWidth = 0;
		m_iGridHeight = 0;
		m_vScale = Vector3(e_vScale.x,e_vScale.y,1.f);
		m_pVBOBuffer = 0;
		SetSize(e_iGridWidth,e_iGridHeight);
	}

	cTerrianVertex::~cTerrianVertex()
	{
		Destroy();
	}

	void	cTerrianVertex::Destroy()
	{
		SAFE_DELETE(m_pfVertex);
		SAFE_DELETE(m_piVectexIndexData);
		SAFE_DELETE(m_pVBOBuffer);
	}
	//void	AdjustVertexFormat(int e_iFormat);,do it later
	void		cTerrianVertex::HeightChangeByCircle(POINT e_CenterPos,int e_iRadius,float e_fCenterHeight,float e_fEdgeHeight,float e_fReduceValue)
	{

	}

	void		cTerrianVertex::Scale(float e_fWidth,float e_fHeight)
	{

	}

	bool		cTerrianVertex::SetSize(int e_iWidth,int e_iHeight)
	{
		if( e_iWidth < 2 || e_iHeight< 2)
			return false;
		if( m_iGridWidth != e_iWidth || m_iGridWidth != e_iHeight )
		{
			Destroy();
			m_pVBOBuffer = new cVBOBuffer();
			m_iGridWidth = e_iWidth;
			m_iGridHeight = e_iHeight;
			int	l_iGrideSize = m_iGridWidth*m_iGridHeight;
			int	l_iVertexSize = l_iGrideSize*m_iStride*sizeof(float);
			char*l_pcVertexData = new char [l_iVertexSize];
			this->m_pfVertex = (float*)l_pcVertexData;
			memset(m_pfVertex,0,l_iVertexSize);
			//each grid has 2 triangles 
			//one triangle 3 points
			int	l_iIncdeCount = (m_iGridWidth-1)*(m_iGridHeight-1)*2*3;
#ifndef OPENGLES_1_X
			m_piVectexIndexData = new unsigned int[l_iIncdeCount];
#else
			m_piVectexIndexData = new unsigned short[l_iIncdeCount];
#endif
			float	l_fUStep = 1.f/(m_iGridWidth-1);
			float	l_fVStep = 1.f/(m_iGridHeight-1);
			float	l_fXStep = 10.f;
			float	l_fYStep = 100.f;
			assert(COMMON_MESH_FVF_FLAG == m_i64FVFFormat&&"sorry now only support COMMON_MESH_FVF_FLAG");
			sVertexFormat*l_pVertexFormat = (sVertexFormat*)m_pfVertex;
			for( int i=0;i<m_iGridHeight;++i )
			{
				for( int j=0;j<m_iGridWidth;++j )
				{
					l_pVertexFormat->vPos.x = j*l_fXStep;
					l_pVertexFormat->vPos.y = i*l_fYStep;
					l_pVertexFormat->vPos.z = 0.f;
					l_pVertexFormat->vNormal = Vector3(Vector3::YAxis);
					l_pVertexFormat->vUV.x = j*l_fUStep;
					l_pVertexFormat->vUV.y = i*l_fVStep;
					++l_pVertexFormat;
				}
			}
			int	l_iIndexBuffer = 0;
			for( int i=0;i<m_iGridWidth-1;++i )
			{
				for( int j=1;j<m_iGridHeight;++j )
				{
					int	l_iTriangleIndex1 = i+m_iGridWidth*j;
					int	l_iTriangleIndex2 = l_iTriangleIndex1+1;
					int	l_iTriangleIndex3 = l_iTriangleIndex1-m_iGridWidth;
					//debug code.
					//sVertexFormat*l_pVertexFormat = (sVertexFormat*)m_pfVertex;
					//Vector3	l_vPos = l_pVertexFormat[l_iTriangleIndex1].vPos;
					m_piVectexIndexData[l_iIndexBuffer] = l_iTriangleIndex1;++l_iIndexBuffer;
					m_piVectexIndexData[l_iIndexBuffer] = l_iTriangleIndex2;++l_iIndexBuffer;
					m_piVectexIndexData[l_iIndexBuffer] = l_iTriangleIndex3;++l_iIndexBuffer;
					int	l_iTriangle2Index1 = l_iTriangleIndex3;
					int	l_iTriangle2Index2 = l_iTriangleIndex2;
					int	l_iTriangle2Index3 = l_iTriangleIndex3+1;
					m_piVectexIndexData[l_iIndexBuffer] = l_iTriangle2Index1;++l_iIndexBuffer;
					m_piVectexIndexData[l_iIndexBuffer] = l_iTriangle2Index2;++l_iIndexBuffer;
					m_piVectexIndexData[l_iIndexBuffer] = l_iTriangle2Index3;++l_iIndexBuffer;
				}
			}
			//assign position,normal,UV
			m_pVBOBuffer->SetupVerticesBuffer(&m_pfVertex[0],FVF_POS,g_iFVF_DataStride[FVF_POS],l_iGrideSize);
			m_pVBOBuffer->SetupVerticesBuffer(&m_pfVertex[3],FVF_NORMAL,g_iFVF_DataStride[FVF_NORMAL],l_iGrideSize);
			m_pVBOBuffer->SetupVerticesBuffer(&m_pfVertex[5],FVF_TEX0,g_iFVF_DataStride[FVF_TEX0],l_iGrideSize);
			m_pVBOBuffer->SetupIndicesBuffer((float*)m_piVectexIndexData,l_iIncdeCount);
			//no need anymore,because use VBO
			SAFE_DELETE(m_pfVertex);
			SAFE_DELETE(m_piVectexIndexData);
			//
			return true;
		}
		return false;
	}
	void		cTerrianVertex::GenerateEmptyData(int e_iWidth,int e_iHeight,int e_iFVF)
	{

	}
	void		cTerrianVertex::CalculateNormal(POINT e_iStart,POINT e_iEnd)
	{

	}
	void		cTerrianVertex::CalculateNormal()
	{

	}

	void		cTerrianVertex::SetSizeAndvertexData(int e_iWidth,int e_iHeight,float*e_pfVertexData)
	{

	}

	void		cTerrianVertex::Render()
	{
		assert(COMMON_MESH_FVF_FLAG == m_i64FVFFormat&&"sorry now only support COMMON_MESH_FVF_FLAG");
		cBaseShader*l_p2DShader = GetCurrentShader();
		UseShaderProgram(STATIC_MESH_SHADER);
		if( m_pVBOBuffer )
		{
			//SetupShaderWorldMatrix(cMatrix44::ScaleMatrix(m_vScale));
			SetupShaderWorldMatrix(cMatrix44::Identity);
			glBindTexture( GL_TEXTURE_2D, 0);
			m_pVBOBuffer->Render(true);
		}
		else
		{
		
		}
		//set back
		UseShaderProgram(l_p2DShader);
	}
//end FATMING_CORE
}