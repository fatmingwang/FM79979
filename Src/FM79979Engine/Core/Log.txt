Nor/11/2012
MPDI render by global time bug fix.
(if current time is bigger than (start time+end time),then current -start time and get modules time shold add start time again)

Jan/03/2013
add StringID
and NamedTypedObject.h's debug info add a new way to detect.

Jan
SwitchToThre/10/2013

ad get error message FUCK

Feb/1/2013
Parcile SizeInit bug fix


March/8/2013
add String Compress and Decompress
and XML Parse and ParseWithMyParse also support

March 23 2013
Android porting

March 31 2013
Android png image parse add.

April 11 2013

cNumeralImage add clone function

March 10 2014

MPDI inherint make a big change 

NamedAndTyped->Frame->RenderableObject->FMAnimationRule->		cFatmingGroupBehaviorList<TYPE>->MPDI
		NameedAndTyped->cNamedTypedObjectVector<TYPE>->
March 13 2014
I donno why
if marco define
_DEBUG and DEBUG
VS will keep showing memory error...
so I change all _DEBUG to DEBUG
to keep Android version stable


April 17 2014

some class add GetMe function for parse with xml


April 28 2014
if app got crash at very first begging

please check all vector are declartion as pointer


April 30 2014
OPENGLES_2_X	//for shader
OPENGLES_1_X	//fixed pipeline and no GL_UNSIGNED_INT.

May 5 2014
std::wstring	CharToWchar(const char *e_strChar)	
if here occured crush,in the dot net that's because fucking MS
using critical section to lock
please call this after whole windos form is showed
or using DNCT::OpenfileGet Name.


May 7 2014

BaseImage render iwth offset and add OriginalSize
MPDI SetStopLastFrame change to SetStayLastFrame(FMAnimation)


May 22 2014
FUCK
opengl ES 1 and 2 
index buffer only support unsigned short mode.


May 26 2014
OutputDebugString
and _CrtDumpMemoryLeaks not working
According to Microsoft, apparently for debugging x64 mixed mode applications the debugger 
type of 'auto' (set in the Debugging->Debugger Type property page) defaults to managed 
rather than mixed. This will need to be explicitly set to 'Mixed' for both managed and 
native debug output to be seen when debugging a 64 bit build.

in the out put window,right click and make sure program output is checked


June 1 2015
the source from 
"https://social.msdn.microsoft.com/Forums/vstudio/en-US/4f48c152-68cd-45ec-a11e-baa7de7f79c3/attempted-to-read-or-write-protected-memory"
in the dot net project if Attempted to read or write protected memory occur

"Unhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt¡±
This issue shouldn't happen in managed code. You can try setting Visual Studio Debugger to bypass this exception:
Tools menu ->Options -> Debugging -> General -> Uncheck this option "Suppress JIT optimization on module load"
 
Also you can check this case about some instruction, which discussed the similar issue to yours.
http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/6adca20b-649f-41a4-8fa1-09534882d76c

I have debugged similar problems in the past and it can be very frustrating. The problem is typically caused by some component (typically unmanaged, but can also be a bad P/Invoke signature) that corrupts the program's memory. You often see differences between debug and release builds because debug builds contain extra metadata to assist in debugging. In debug mode, the corruption will kill some debug metadata, which will only cause you to see spurious debugging information, but not cause the program to crash. In release, the debug data is not present and the error overwrites critical data such as return addresses, which will cause the program to crash. You will also see small changes (like changing compiler optimizations, or re-ordering instructions) cause code to start working. What you've done is mask the problem. The memory corruption is still occuring, it's just not occuring to a critical piece of memory such as a return address. You will likely see it re-appear later as you continue modifying the code.

This is honestly a brutal class of problems to diagnose because they're only present when you don't have debug information. Some suggestions:
1.   Try turning on all optimizations, run the program under the debugger, and see if the error occurs. (Typically all optimizations are turned off in debug mode so that debugging is easier.) This will at least give you a way to reproduce the error when you have more debug information. This honestly won't help you a whole lot because by the time you crash, the method call that corrupted the memory is long gone.

2.   Look at all unmanaged code that you're calling: COM objects, C/C++ DLLs, Win32 calls, etc. Check the P/Invoke signatures and COM interop thunks for all unmanaged code to verify that they're correct. Don't trust P/Invoke signatures that you find on the 'net. They're not always correct. Verify for yourself that your data types and parameter orderings are correct.

3.   Try removing the unmanaged code (stub out the calls) and see if the problem goes away. If it does, investigate the component to verify that it is free of memory leaks. (Note that you might only be masking the problem as you re-arrange code.)

4.   Try running your code under a unmanaged memory checker like Compuware BoundsChecker, which will look for memory leaks and access violations. This will likely give you some hints as to which unmanaged component is misbehaving

Sep 3 2015
ElementHost^l_pHost = gcnew ElementHost();
if here occur crash clear temp file
C:\Users\UserName\AppData\Local\Temp
http://stackoverflow.com/questions/13315940/apps-exe-file-missing-net-targetframework-but-only-on-clean-builds


I've been working on this for 3 days and I just found the answer.

Apparently MSBuild auto-creates a file called

.NETFramework,Version=v4.0.AssemblyAttributes.cpp
in your

C:\Users\YOURNAME\AppData\Local\Temp
directory. It uses this file when creating your .exe file.

On my machine this file contained the following:

#using <mscorlib.dll>
[assembly: System::Runtime::Versioning::TargetFrameworkAttribute(L"", FrameworkDisplayName=L".NET Framework 4")];
The empty string was causing my problems. I changed the file to say this:

#using <mscorlib.dll>
[assembly: System::Runtime::Versioning::TargetFrameworkAttribute(L".NETFramework,Version=v4.0", FrameworkDisplayName=L".NET Framework 4")];
Now everything works! I don't know how the file got into that state, but I never touched it. I don't think it's used in VS2008. I'm somewhat irked that such a file is being used in my build.



Nov 11 2017
trying to upgrade to x64 and misunderstanding _WIN32 flag
_WIN32 it means use windows32 API not compile as 32bit
but _WIN64 mean compile to 64bit...
https://stackoverflow.com/questions/17380340/win32-preprocessor-definition-in-64bit-windows-platform

Dec 08 2017
remove opengl es1

Jan 03 2018
1>msvcrtd.lib(_init_.obj) : error LNK2001: unresolved external symbol _CrtDbgReport
1>msvcrtd.lib(_init_.obj) : error LNK2001: unresolved external symbol _CrtDbgReportW
https://social.msdn.microsoft.com/Forums/vstudio/en-US/5e126c79-77f3-4d50-a47f-a9ce35cff0a4/unresolved-external-symbol-impcrtdbgreportw?forum=vcgeneral
I had to do something very similar to fix this issue.   
In our case we had to differentiate between the debug and release versions.
So, when doing a release build, ignore msvcrtd.lib, and in debug build ignore msvcrt.lib


29/Jan/2018
how to use precompiled header where the folder we want
https://stackoverflow.com/questions/6096384/how-to-fix-pch-file-missing-on-build
sometimes we just want use precompiled header in a special folder
right click on the stdafx.cpp
go to c++->precompiled header select  Precompiled Header Create (/Yc).


2/Feb/2018
https://www.google.com.tw/search?q=inheritance&spell=1&sa=X&ved=0ahUKEwjzq87xlobZAhXGErwKHWamCNYQBQgiKAA&biw=1536&bih=756
while inherited 2 object which parent devired from same class,it need add virtual public,
or the data would be wrong.
virtual inheritance
ex:cCPP11Thread

4/July/2018
fuck the release build auto link to msvcrtd.lib
this make app contain debug infor and it link to VCRRUNTIME14D.dll->USERBASED.dll
it spent me  hours...fuck

8/Aug/2018
failed to start with 0xc000007b
please install openal!
https://www.start64.com/index.php/64-bit-news/64bit-software-news/454-openal-installer-for-windows-32-and-64bit