this.onerror = function(e) {
  console.error(e);
}


function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}
function _emscripten_get_heap_size() {
      return HEAP8.length;
    }
function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }
function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;

    var str = '';
    while (!(idx >= endIdx)) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      // If not building with TextDecoder enabled, we don't know the string length, so scan for \0 byte.
      // If building with TextDecoder, we know exactly at what byte index the string ends, so checking for nulls here would be redundant.
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  return str;
}
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
function _emscripten_is_main_runtime_thread() {
    return __pthread_is_main_runtime_thread|0; // Semantically the same as testing "!ENVIRONMENT_IS_PTHREAD" outside the asm.js scope
}
function _emscripten_futex_wait(addr, val, timeout) {
      if (addr <= 0 || addr > HEAP8.length || addr&3 != 0) return -22;
  //    dump('futex_wait addr:' + addr + ' by thread: ' + _pthread_self() + (ENVIRONMENT_IS_PTHREAD?'(pthread)':'') + '\n');
      if (ENVIRONMENT_IS_WORKER) {
        var ret = Atomics.wait(HEAP32, addr >> 2, val, timeout);
  //    dump('futex_wait done by thread: ' + _pthread_self() + (ENVIRONMENT_IS_PTHREAD?'(pthread)':'') + '\n');
        if (ret === 'timed-out') return -110;
        if (ret === 'not-equal') return -11;
        if (ret === 'ok') return 0;
        throw 'Atomics.wait returned an unexpected value ' + ret;
      } else {
        // Atomics.wait is not available in the main browser thread, so simulate it via busy spinning.
        var loadedVal = Atomics.load(HEAP32, addr >> 2);
        if (val != loadedVal) return -11;
  
        var tNow = performance.now();
        var tEnd = tNow + timeout;
  
  
        // Register globally which address the main thread is simulating to be waiting on. When zero, main thread is not waiting on anything,
        // and on nonzero, the contents of address pointed by __main_thread_futex_wait_address tell which address the main thread is simulating its wait on.
        Atomics.store(HEAP32, __main_thread_futex_wait_address >> 2, addr);
        var ourWaitAddress = addr; // We may recursively re-enter this function while processing queued calls, in which case we'll do a spurious wakeup of the older wait operation.
        while (addr == ourWaitAddress) {
          tNow = performance.now();
          if (tNow > tEnd) {
            return -110;
          }
          _emscripten_main_thread_process_queued_calls(); // We are performing a blocking loop here, so must pump any pthreads if they want to perform operations that are proxied.
          addr = Atomics.load(HEAP32, __main_thread_futex_wait_address >> 2); // Look for a worker thread waking us up.
        }
        return 0;
      }
    }
function _malloc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0198 = 0, $$0200 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024364$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0, $$0294$i$i = 0;
 var $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1 = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124463$i = 0;
 var $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2 = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0;
 var $$3$i = 0, $$3$i$i = 0, $$3$i204 = 0, $$3$i204217 = 0, $$3229$i = 0, $$3235$i = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4230$i = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$7$i = 0;
 var $$7239$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i209 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i210Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre16$i$i = 0, $$sink = 0, $$sink324 = 0, $$sink325 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0;
 var $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $or$cond$i = 0;
 var $or$cond$i212 = 0, $or$cond1$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond2$i213 = 0, $or$cond43$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $spec$select$i = 0, $spec$select$i206 = 0, $spec$select1$i = 0, $spec$select10$i = 0, $spec$select3$i = 0, $spec$select42$i = 0, $spec$select7$i = 0, $spec$select9$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = load4(452068);
 $4 = ($3|0)==(0);
 if ($4) {
  (___pthread_mutex_lock(452092)|0);
  $5 = load4(452068);
  $6 = ($5|0)==(0);
  if ($6) {
   store4((452076),4096);
   store4((452072),4096);
   store4((452080),-1);
   store4((452084),-1);
   store4((452088),2);
   store4((452564),2);
   $7 = (_pthread_mutexattr_init($1)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = (_pthread_mutex_init((452568),$1)|0);
    $10 = ($9|0)==(0);
    if ($10) {
    }
   }
   $11 = $2;
   $12 = $11 & -16;
   $13 = $12 ^ 1431655768;
   Atomics_store(HEAP32,113017,$13)|0;
  }
  (___pthread_mutex_unlock(452092)|0);
 }
 $14 = load4((452564));
 $15 = $14 & 2;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = (___pthread_mutex_lock((452568))|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $19 = ($0>>>0)<(245);
 do {
  if ($19) {
   $20 = ($0>>>0)<(11);
   $21 = (($0) + 11)|0;
   $22 = $21 & -8;
   $23 = $20 ? 16 : $22;
   $24 = $23 >>> 3;
   $25 = load4(452120);
   $26 = $25 >>> $24;
   $27 = $26 & 3;
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = $26 & 1;
    $30 = $29 ^ 1;
    $31 = (($30) + ($24))|0;
    $32 = $31 << 1;
    $33 = (452160 + ($32<<2)|0);
    $34 = ((($33)) + 8|0);
    $35 = load4($34);
    $36 = ((($35)) + 8|0);
    $37 = load4($36);
    $38 = ($37|0)==($33|0);
    do {
     if ($38) {
      $39 = 1 << $31;
      $40 = $39 ^ -1;
      $41 = $25 & $40;
      store4(452120,$41);
     } else {
      $42 = load4((452136));
      $43 = ($42>>>0)>($37>>>0);
      if ($43) {
       _abort();
       // unreachable;
      }
      $44 = ((($37)) + 12|0);
      $45 = load4($44);
      $46 = ($45|0)==($35|0);
      if ($46) {
       store4($44,$33);
       store4($34,$37);
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $47 = $31 << 3;
    $48 = $47 | 3;
    $49 = ((($35)) + 4|0);
    store4($49,$48);
    $50 = (($35) + ($47)|0);
    $51 = ((($50)) + 4|0);
    $52 = load4($51);
    $53 = $52 | 1;
    store4($51,$53);
    $$2 = $36;
    break;
   }
   $54 = load4((452128));
   $55 = ($23>>>0)>($54>>>0);
   if ($55) {
    $56 = ($26|0)==(0);
    if (!($56)) {
     $57 = $26 << $24;
     $58 = 2 << $24;
     $59 = (0 - ($58))|0;
     $60 = $58 | $59;
     $61 = $57 & $60;
     $62 = (0 - ($61))|0;
     $63 = $61 & $62;
     $64 = (($63) + -1)|0;
     $65 = $64 >>> 12;
     $66 = $65 & 16;
     $67 = $64 >>> $66;
     $68 = $67 >>> 5;
     $69 = $68 & 8;
     $70 = $69 | $66;
     $71 = $67 >>> $69;
     $72 = $71 >>> 2;
     $73 = $72 & 4;
     $74 = $70 | $73;
     $75 = $71 >>> $73;
     $76 = $75 >>> 1;
     $77 = $76 & 2;
     $78 = $74 | $77;
     $79 = $75 >>> $77;
     $80 = $79 >>> 1;
     $81 = $80 & 1;
     $82 = $78 | $81;
     $83 = $79 >>> $81;
     $84 = (($82) + ($83))|0;
     $85 = $84 << 1;
     $86 = (452160 + ($85<<2)|0);
     $87 = ((($86)) + 8|0);
     $88 = load4($87);
     $89 = ((($88)) + 8|0);
     $90 = load4($89);
     $91 = ($90|0)==($86|0);
     do {
      if ($91) {
       $92 = 1 << $84;
       $93 = $92 ^ -1;
       $94 = $25 & $93;
       store4(452120,$94);
       $115 = $94;
      } else {
       $95 = load4((452136));
       $96 = ($95>>>0)>($90>>>0);
       if ($96) {
        _abort();
        // unreachable;
       }
       $97 = ((($90)) + 12|0);
       $98 = load4($97);
       $99 = ($98|0)==($88|0);
       if ($99) {
        store4($97,$86);
        store4($87,$90);
        $115 = $25;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $100 = $84 << 3;
     $101 = (($100) - ($23))|0;
     $102 = $23 | 3;
     $103 = ((($88)) + 4|0);
     store4($103,$102);
     $104 = (($88) + ($23)|0);
     $105 = $101 | 1;
     $106 = ((($104)) + 4|0);
     store4($106,$105);
     $107 = (($88) + ($100)|0);
     store4($107,$101);
     $108 = ($54|0)==(0);
     if (!($108)) {
      $109 = load4((452140));
      $110 = $54 >>> 3;
      $111 = $110 << 1;
      $112 = (452160 + ($111<<2)|0);
      $113 = 1 << $110;
      $114 = $115 & $113;
      $116 = ($114|0)==(0);
      if ($116) {
       $117 = $115 | $113;
       store4(452120,$117);
       $$pre = ((($112)) + 8|0);
       $$0200 = $112;$$pre$phiZ2D = $$pre;
      } else {
       $118 = ((($112)) + 8|0);
       $119 = load4($118);
       $120 = load4((452136));
       $121 = ($120>>>0)>($119>>>0);
       if ($121) {
        _abort();
        // unreachable;
       } else {
        $$0200 = $119;$$pre$phiZ2D = $118;
       }
      }
      store4($$pre$phiZ2D,$109);
      $122 = ((($$0200)) + 12|0);
      store4($122,$109);
      $123 = ((($109)) + 8|0);
      store4($123,$$0200);
      $124 = ((($109)) + 12|0);
      store4($124,$112);
     }
     store4((452128),$101);
     store4((452140),$104);
     $$2 = $89;
     break;
    }
    $125 = load4((452124));
    $126 = ($125|0)==(0);
    if ($126) {
     $$0198 = $23;
     label = 163;
    } else {
     $127 = (0 - ($125))|0;
     $128 = $125 & $127;
     $129 = (($128) + -1)|0;
     $130 = $129 >>> 12;
     $131 = $130 & 16;
     $132 = $129 >>> $131;
     $133 = $132 >>> 5;
     $134 = $133 & 8;
     $135 = $134 | $131;
     $136 = $132 >>> $134;
     $137 = $136 >>> 2;
     $138 = $137 & 4;
     $139 = $135 | $138;
     $140 = $136 >>> $138;
     $141 = $140 >>> 1;
     $142 = $141 & 2;
     $143 = $139 | $142;
     $144 = $140 >>> $142;
     $145 = $144 >>> 1;
     $146 = $145 & 1;
     $147 = $143 | $146;
     $148 = $144 >>> $146;
     $149 = (($147) + ($148))|0;
     $150 = (452424 + ($149<<2)|0);
     $151 = load4($150);
     $152 = ((($151)) + 4|0);
     $153 = load4($152);
     $154 = $153 & -8;
     $155 = (($154) - ($23))|0;
     $$0189$i = $151;$$0190$i = $151;$$0191$i = $155;
     while(1) {
      $156 = ((($$0189$i)) + 16|0);
      $157 = load4($156);
      $158 = ($157|0)==(0|0);
      if ($158) {
       $159 = ((($$0189$i)) + 20|0);
       $160 = load4($159);
       $161 = ($160|0)==(0|0);
       if ($161) {
        break;
       } else {
        $163 = $160;
       }
      } else {
       $163 = $157;
      }
      $162 = ((($163)) + 4|0);
      $164 = load4($162);
      $165 = $164 & -8;
      $166 = (($165) - ($23))|0;
      $167 = ($166>>>0)<($$0191$i>>>0);
      $spec$select$i = $167 ? $166 : $$0191$i;
      $spec$select1$i = $167 ? $163 : $$0190$i;
      $$0189$i = $163;$$0190$i = $spec$select1$i;$$0191$i = $spec$select$i;
     }
     $168 = load4((452136));
     $169 = ($168>>>0)>($$0190$i>>>0);
     if ($169) {
      _abort();
      // unreachable;
     }
     $170 = (($$0190$i) + ($23)|0);
     $171 = ($170>>>0)>($$0190$i>>>0);
     if (!($171)) {
      _abort();
      // unreachable;
     }
     $172 = ((($$0190$i)) + 24|0);
     $173 = load4($172);
     $174 = ((($$0190$i)) + 12|0);
     $175 = load4($174);
     $176 = ($175|0)==($$0190$i|0);
     do {
      if ($176) {
       $186 = ((($$0190$i)) + 20|0);
       $187 = load4($186);
       $188 = ($187|0)==(0|0);
       if ($188) {
        $189 = ((($$0190$i)) + 16|0);
        $190 = load4($189);
        $191 = ($190|0)==(0|0);
        if ($191) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i$ph = $190;$$1196$i$ph = $189;
        }
       } else {
        $$1194$i$ph = $187;$$1196$i$ph = $186;
       }
       $$1194$i = $$1194$i$ph;$$1196$i = $$1196$i$ph;
       while(1) {
        $192 = ((($$1194$i)) + 20|0);
        $193 = load4($192);
        $194 = ($193|0)==(0|0);
        if ($194) {
         $195 = ((($$1194$i)) + 16|0);
         $196 = load4($195);
         $197 = ($196|0)==(0|0);
         if ($197) {
          break;
         } else {
          $$1194$i$be = $196;$$1196$i$be = $195;
         }
        } else {
         $$1194$i$be = $193;$$1196$i$be = $192;
        }
        $$1194$i = $$1194$i$be;$$1196$i = $$1196$i$be;
       }
       $198 = ($168>>>0)>($$1196$i>>>0);
       if ($198) {
        _abort();
        // unreachable;
       } else {
        store4($$1196$i,0);
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $177 = ((($$0190$i)) + 8|0);
       $178 = load4($177);
       $179 = ($168>>>0)>($178>>>0);
       if ($179) {
        _abort();
        // unreachable;
       }
       $180 = ((($178)) + 12|0);
       $181 = load4($180);
       $182 = ($181|0)==($$0190$i|0);
       if (!($182)) {
        _abort();
        // unreachable;
       }
       $183 = ((($175)) + 8|0);
       $184 = load4($183);
       $185 = ($184|0)==($$0190$i|0);
       if ($185) {
        store4($180,$175);
        store4($183,$178);
        $$3$i = $175;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $199 = ($173|0)==(0|0);
     L90: do {
      if (!($199)) {
       $200 = ((($$0190$i)) + 28|0);
       $201 = load4($200);
       $202 = (452424 + ($201<<2)|0);
       $203 = load4($202);
       $204 = ($$0190$i|0)==($203|0);
       do {
        if ($204) {
         store4($202,$$3$i);
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $205 = 1 << $201;
          $206 = $205 ^ -1;
          $207 = $125 & $206;
          store4((452124),$207);
          break L90;
         }
        } else {
         $208 = load4((452136));
         $209 = ($208>>>0)>($173>>>0);
         if ($209) {
          _abort();
          // unreachable;
         } else {
          $210 = ((($173)) + 16|0);
          $211 = load4($210);
          $212 = ($211|0)==($$0190$i|0);
          $213 = ((($173)) + 20|0);
          $$sink = $212 ? $210 : $213;
          store4($$sink,$$3$i);
          $214 = ($$3$i|0)==(0|0);
          if ($214) {
           break L90;
          } else {
           break;
          }
         }
        }
       } while(0);
       $215 = load4((452136));
       $216 = ($215>>>0)>($$3$i>>>0);
       if ($216) {
        _abort();
        // unreachable;
       }
       $217 = ((($$3$i)) + 24|0);
       store4($217,$173);
       $218 = ((($$0190$i)) + 16|0);
       $219 = load4($218);
       $220 = ($219|0)==(0|0);
       do {
        if (!($220)) {
         $221 = ($215>>>0)>($219>>>0);
         if ($221) {
          _abort();
          // unreachable;
         } else {
          $222 = ((($$3$i)) + 16|0);
          store4($222,$219);
          $223 = ((($219)) + 24|0);
          store4($223,$$3$i);
          break;
         }
        }
       } while(0);
       $224 = ((($$0190$i)) + 20|0);
       $225 = load4($224);
       $226 = ($225|0)==(0|0);
       if (!($226)) {
        $227 = load4((452136));
        $228 = ($227>>>0)>($225>>>0);
        if ($228) {
         _abort();
         // unreachable;
        } else {
         $229 = ((($$3$i)) + 20|0);
         store4($229,$225);
         $230 = ((($225)) + 24|0);
         store4($230,$$3$i);
         break;
        }
       }
      }
     } while(0);
     $231 = ($$0191$i>>>0)<(16);
     if ($231) {
      $232 = (($$0191$i) + ($23))|0;
      $233 = $232 | 3;
      $234 = ((($$0190$i)) + 4|0);
      store4($234,$233);
      $235 = (($$0190$i) + ($232)|0);
      $236 = ((($235)) + 4|0);
      $237 = load4($236);
      $238 = $237 | 1;
      store4($236,$238);
     } else {
      $239 = $23 | 3;
      $240 = ((($$0190$i)) + 4|0);
      store4($240,$239);
      $241 = $$0191$i | 1;
      $242 = ((($170)) + 4|0);
      store4($242,$241);
      $243 = (($170) + ($$0191$i)|0);
      store4($243,$$0191$i);
      $244 = ($54|0)==(0);
      if (!($244)) {
       $245 = load4((452140));
       $246 = $54 >>> 3;
       $247 = $246 << 1;
       $248 = (452160 + ($247<<2)|0);
       $249 = 1 << $246;
       $250 = $249 & $25;
       $251 = ($250|0)==(0);
       if ($251) {
        $252 = $249 | $25;
        store4(452120,$252);
        $$pre$i = ((($248)) + 8|0);
        $$0187$i = $248;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $253 = ((($248)) + 8|0);
        $254 = load4($253);
        $255 = load4((452136));
        $256 = ($255>>>0)>($254>>>0);
        if ($256) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $254;$$pre$phi$iZ2D = $253;
        }
       }
       store4($$pre$phi$iZ2D,$245);
       $257 = ((($$0187$i)) + 12|0);
       store4($257,$245);
       $258 = ((($245)) + 8|0);
       store4($258,$$0187$i);
       $259 = ((($245)) + 12|0);
       store4($259,$248);
      }
      store4((452128),$$0191$i);
      store4((452140),$170);
     }
     $260 = ((($$0190$i)) + 8|0);
     $$2 = $260;
    }
   } else {
    $$0198 = $23;
    label = 163;
   }
  } else {
   $261 = ($0>>>0)>(4294967231);
   if ($261) {
    $$0198 = -1;
    label = 163;
   } else {
    $262 = (($0) + 11)|0;
    $263 = $262 & -8;
    $264 = load4((452124));
    $265 = ($264|0)==(0);
    if ($265) {
     $$0198 = $263;
     label = 163;
    } else {
     $266 = (0 - ($263))|0;
     $267 = $262 >>> 8;
     $268 = ($267|0)==(0);
     if ($268) {
      $$0357$i = 0;
     } else {
      $269 = ($263>>>0)>(16777215);
      if ($269) {
       $$0357$i = 31;
      } else {
       $270 = (($267) + 1048320)|0;
       $271 = $270 >>> 16;
       $272 = $271 & 8;
       $273 = $267 << $272;
       $274 = (($273) + 520192)|0;
       $275 = $274 >>> 16;
       $276 = $275 & 4;
       $277 = $276 | $272;
       $278 = $273 << $276;
       $279 = (($278) + 245760)|0;
       $280 = $279 >>> 16;
       $281 = $280 & 2;
       $282 = $277 | $281;
       $283 = (14 - ($282))|0;
       $284 = $278 << $281;
       $285 = $284 >>> 15;
       $286 = (($283) + ($285))|0;
       $287 = $286 << 1;
       $288 = (($286) + 7)|0;
       $289 = $263 >>> $288;
       $290 = $289 & 1;
       $291 = $290 | $287;
       $$0357$i = $291;
      }
     }
     $292 = (452424 + ($$0357$i<<2)|0);
     $293 = load4($292);
     $294 = ($293|0)==(0|0);
     L133: do {
      if ($294) {
       $$2353$i = 0;$$3$i204 = 0;$$3348$i = $266;
       label = 94;
      } else {
       $295 = ($$0357$i|0)==(31);
       $296 = $$0357$i >>> 1;
       $297 = (25 - ($296))|0;
       $298 = $295 ? 0 : $297;
       $299 = $263 << $298;
       $$0340$i = 0;$$0345$i = $266;$$0351$i = $293;$$0358$i = $299;$$0361$i = 0;
       while(1) {
        $300 = ((($$0351$i)) + 4|0);
        $301 = load4($300);
        $302 = $301 & -8;
        $303 = (($302) - ($263))|0;
        $304 = ($303>>>0)<($$0345$i>>>0);
        if ($304) {
         $305 = ($303|0)==(0);
         if ($305) {
          $$420$i$ph = $$0351$i;$$434919$i$ph = 0;$$535618$i$ph = $$0351$i;
          label = 98;
          break L133;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $303;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $306 = ((($$0351$i)) + 20|0);
        $307 = load4($306);
        $308 = $$0358$i >>> 31;
        $309 = (((($$0351$i)) + 16|0) + ($308<<2)|0);
        $310 = load4($309);
        $311 = ($307|0)==(0|0);
        $312 = ($307|0)==($310|0);
        $or$cond2$i = $311 | $312;
        $$1362$i = $or$cond2$i ? $$0361$i : $307;
        $313 = ($310|0)==(0|0);
        $spec$select7$i = $$0358$i << 1;
        if ($313) {
         $$2353$i = $$1362$i;$$3$i204 = $$1341$i;$$3348$i = $$1346$i;
         label = 94;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $310;$$0358$i = $spec$select7$i;$$0361$i = $$1362$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 94) {
      $314 = ($$2353$i|0)==(0|0);
      $315 = ($$3$i204|0)==(0|0);
      $or$cond$i = $314 & $315;
      if ($or$cond$i) {
       $316 = 2 << $$0357$i;
       $317 = (0 - ($316))|0;
       $318 = $316 | $317;
       $319 = $318 & $264;
       $320 = ($319|0)==(0);
       if ($320) {
        $$0198 = $263;
        label = 163;
        break;
       }
       $321 = (0 - ($319))|0;
       $322 = $319 & $321;
       $323 = (($322) + -1)|0;
       $324 = $323 >>> 12;
       $325 = $324 & 16;
       $326 = $323 >>> $325;
       $327 = $326 >>> 5;
       $328 = $327 & 8;
       $329 = $328 | $325;
       $330 = $326 >>> $328;
       $331 = $330 >>> 2;
       $332 = $331 & 4;
       $333 = $329 | $332;
       $334 = $330 >>> $332;
       $335 = $334 >>> 1;
       $336 = $335 & 2;
       $337 = $333 | $336;
       $338 = $334 >>> $336;
       $339 = $338 >>> 1;
       $340 = $339 & 1;
       $341 = $337 | $340;
       $342 = $338 >>> $340;
       $343 = (($341) + ($342))|0;
       $344 = (452424 + ($343<<2)|0);
       $345 = load4($344);
       $$3$i204217 = 0;$$4355$i = $345;
      } else {
       $$3$i204217 = $$3$i204;$$4355$i = $$2353$i;
      }
      $346 = ($$4355$i|0)==(0|0);
      if ($346) {
       $$4$lcssa$i = $$3$i204217;$$4349$lcssa$i = $$3348$i;
      } else {
       $$420$i$ph = $$3$i204217;$$434919$i$ph = $$3348$i;$$535618$i$ph = $$4355$i;
       label = 98;
      }
     }
     if ((label|0) == 98) {
      $$420$i = $$420$i$ph;$$434919$i = $$434919$i$ph;$$535618$i = $$535618$i$ph;
      while(1) {
       $347 = ((($$535618$i)) + 4|0);
       $348 = load4($347);
       $349 = $348 & -8;
       $350 = (($349) - ($263))|0;
       $351 = ($350>>>0)<($$434919$i>>>0);
       $spec$select$i206 = $351 ? $350 : $$434919$i;
       $spec$select3$i = $351 ? $$535618$i : $$420$i;
       $352 = ((($$535618$i)) + 16|0);
       $353 = load4($352);
       $354 = ($353|0)==(0|0);
       if ($354) {
        $355 = ((($$535618$i)) + 20|0);
        $356 = load4($355);
        $357 = $356;
       } else {
        $357 = $353;
       }
       $358 = ($357|0)==(0|0);
       if ($358) {
        $$4$lcssa$i = $spec$select3$i;$$4349$lcssa$i = $spec$select$i206;
        break;
       } else {
        $$420$i = $spec$select3$i;$$434919$i = $spec$select$i206;$$535618$i = $357;
       }
      }
     }
     $359 = ($$4$lcssa$i|0)==(0|0);
     if ($359) {
      $$0198 = $263;
      label = 163;
     } else {
      $360 = load4((452128));
      $361 = (($360) - ($263))|0;
      $362 = ($$4349$lcssa$i>>>0)<($361>>>0);
      if ($362) {
       $363 = load4((452136));
       $364 = ($363>>>0)>($$4$lcssa$i>>>0);
       if ($364) {
        _abort();
        // unreachable;
       }
       $365 = (($$4$lcssa$i) + ($263)|0);
       $366 = ($365>>>0)>($$4$lcssa$i>>>0);
       if (!($366)) {
        _abort();
        // unreachable;
       }
       $367 = ((($$4$lcssa$i)) + 24|0);
       $368 = load4($367);
       $369 = ((($$4$lcssa$i)) + 12|0);
       $370 = load4($369);
       $371 = ($370|0)==($$4$lcssa$i|0);
       do {
        if ($371) {
         $381 = ((($$4$lcssa$i)) + 20|0);
         $382 = load4($381);
         $383 = ($382|0)==(0|0);
         if ($383) {
          $384 = ((($$4$lcssa$i)) + 16|0);
          $385 = load4($384);
          $386 = ($385|0)==(0|0);
          if ($386) {
           $$3371$i = 0;
           break;
          } else {
           $$1369$i$ph = $385;$$1373$i$ph = $384;
          }
         } else {
          $$1369$i$ph = $382;$$1373$i$ph = $381;
         }
         $$1369$i = $$1369$i$ph;$$1373$i = $$1373$i$ph;
         while(1) {
          $387 = ((($$1369$i)) + 20|0);
          $388 = load4($387);
          $389 = ($388|0)==(0|0);
          if ($389) {
           $390 = ((($$1369$i)) + 16|0);
           $391 = load4($390);
           $392 = ($391|0)==(0|0);
           if ($392) {
            break;
           } else {
            $$1369$i$be = $391;$$1373$i$be = $390;
           }
          } else {
           $$1369$i$be = $388;$$1373$i$be = $387;
          }
          $$1369$i = $$1369$i$be;$$1373$i = $$1373$i$be;
         }
         $393 = ($363>>>0)>($$1373$i>>>0);
         if ($393) {
          _abort();
          // unreachable;
         } else {
          store4($$1373$i,0);
          $$3371$i = $$1369$i;
          break;
         }
        } else {
         $372 = ((($$4$lcssa$i)) + 8|0);
         $373 = load4($372);
         $374 = ($363>>>0)>($373>>>0);
         if ($374) {
          _abort();
          // unreachable;
         }
         $375 = ((($373)) + 12|0);
         $376 = load4($375);
         $377 = ($376|0)==($$4$lcssa$i|0);
         if (!($377)) {
          _abort();
          // unreachable;
         }
         $378 = ((($370)) + 8|0);
         $379 = load4($378);
         $380 = ($379|0)==($$4$lcssa$i|0);
         if ($380) {
          store4($375,$370);
          store4($378,$373);
          $$3371$i = $370;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $394 = ($368|0)==(0|0);
       L187: do {
        if ($394) {
         $486 = $264;
        } else {
         $395 = ((($$4$lcssa$i)) + 28|0);
         $396 = load4($395);
         $397 = (452424 + ($396<<2)|0);
         $398 = load4($397);
         $399 = ($$4$lcssa$i|0)==($398|0);
         do {
          if ($399) {
           store4($397,$$3371$i);
           $cond$i208 = ($$3371$i|0)==(0|0);
           if ($cond$i208) {
            $400 = 1 << $396;
            $401 = $400 ^ -1;
            $402 = $264 & $401;
            store4((452124),$402);
            $486 = $402;
            break L187;
           }
          } else {
           $403 = load4((452136));
           $404 = ($403>>>0)>($368>>>0);
           if ($404) {
            _abort();
            // unreachable;
           } else {
            $405 = ((($368)) + 16|0);
            $406 = load4($405);
            $407 = ($406|0)==($$4$lcssa$i|0);
            $408 = ((($368)) + 20|0);
            $$sink324 = $407 ? $405 : $408;
            store4($$sink324,$$3371$i);
            $409 = ($$3371$i|0)==(0|0);
            if ($409) {
             $486 = $264;
             break L187;
            } else {
             break;
            }
           }
          }
         } while(0);
         $410 = load4((452136));
         $411 = ($410>>>0)>($$3371$i>>>0);
         if ($411) {
          _abort();
          // unreachable;
         }
         $412 = ((($$3371$i)) + 24|0);
         store4($412,$368);
         $413 = ((($$4$lcssa$i)) + 16|0);
         $414 = load4($413);
         $415 = ($414|0)==(0|0);
         do {
          if (!($415)) {
           $416 = ($410>>>0)>($414>>>0);
           if ($416) {
            _abort();
            // unreachable;
           } else {
            $417 = ((($$3371$i)) + 16|0);
            store4($417,$414);
            $418 = ((($414)) + 24|0);
            store4($418,$$3371$i);
            break;
           }
          }
         } while(0);
         $419 = ((($$4$lcssa$i)) + 20|0);
         $420 = load4($419);
         $421 = ($420|0)==(0|0);
         if ($421) {
          $486 = $264;
         } else {
          $422 = load4((452136));
          $423 = ($422>>>0)>($420>>>0);
          if ($423) {
           _abort();
           // unreachable;
          } else {
           $424 = ((($$3371$i)) + 20|0);
           store4($424,$420);
           $425 = ((($420)) + 24|0);
           store4($425,$$3371$i);
           $486 = $264;
           break;
          }
         }
        }
       } while(0);
       $426 = ($$4349$lcssa$i>>>0)<(16);
       L211: do {
        if ($426) {
         $427 = (($$4349$lcssa$i) + ($263))|0;
         $428 = $427 | 3;
         $429 = ((($$4$lcssa$i)) + 4|0);
         store4($429,$428);
         $430 = (($$4$lcssa$i) + ($427)|0);
         $431 = ((($430)) + 4|0);
         $432 = load4($431);
         $433 = $432 | 1;
         store4($431,$433);
        } else {
         $434 = $263 | 3;
         $435 = ((($$4$lcssa$i)) + 4|0);
         store4($435,$434);
         $436 = $$4349$lcssa$i | 1;
         $437 = ((($365)) + 4|0);
         store4($437,$436);
         $438 = (($365) + ($$4349$lcssa$i)|0);
         store4($438,$$4349$lcssa$i);
         $439 = $$4349$lcssa$i >>> 3;
         $440 = ($$4349$lcssa$i>>>0)<(256);
         if ($440) {
          $441 = $439 << 1;
          $442 = (452160 + ($441<<2)|0);
          $443 = load4(452120);
          $444 = 1 << $439;
          $445 = $443 & $444;
          $446 = ($445|0)==(0);
          do {
           if ($446) {
            $447 = $443 | $444;
            store4(452120,$447);
            $$pre$i209 = ((($442)) + 8|0);
            $$0367$i = $442;$$pre$phi$i210Z2D = $$pre$i209;
           } else {
            $448 = ((($442)) + 8|0);
            $449 = load4($448);
            $450 = load4((452136));
            $451 = ($450>>>0)>($449>>>0);
            if (!($451)) {
             $$0367$i = $449;$$pre$phi$i210Z2D = $448;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          store4($$pre$phi$i210Z2D,$365);
          $452 = ((($$0367$i)) + 12|0);
          store4($452,$365);
          $453 = ((($365)) + 8|0);
          store4($453,$$0367$i);
          $454 = ((($365)) + 12|0);
          store4($454,$442);
          break;
         }
         $455 = $$4349$lcssa$i >>> 8;
         $456 = ($455|0)==(0);
         if ($456) {
          $$0360$i = 0;
         } else {
          $457 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($457) {
           $$0360$i = 31;
          } else {
           $458 = (($455) + 1048320)|0;
           $459 = $458 >>> 16;
           $460 = $459 & 8;
           $461 = $455 << $460;
           $462 = (($461) + 520192)|0;
           $463 = $462 >>> 16;
           $464 = $463 & 4;
           $465 = $464 | $460;
           $466 = $461 << $464;
           $467 = (($466) + 245760)|0;
           $468 = $467 >>> 16;
           $469 = $468 & 2;
           $470 = $465 | $469;
           $471 = (14 - ($470))|0;
           $472 = $466 << $469;
           $473 = $472 >>> 15;
           $474 = (($471) + ($473))|0;
           $475 = $474 << 1;
           $476 = (($474) + 7)|0;
           $477 = $$4349$lcssa$i >>> $476;
           $478 = $477 & 1;
           $479 = $478 | $475;
           $$0360$i = $479;
          }
         }
         $480 = (452424 + ($$0360$i<<2)|0);
         $481 = ((($365)) + 28|0);
         store4($481,$$0360$i);
         $482 = ((($365)) + 16|0);
         $483 = ((($482)) + 4|0);
         store4($483,0);
         store4($482,0);
         $484 = 1 << $$0360$i;
         $485 = $486 & $484;
         $487 = ($485|0)==(0);
         if ($487) {
          $488 = $486 | $484;
          store4((452124),$488);
          store4($480,$365);
          $489 = ((($365)) + 24|0);
          store4($489,$480);
          $490 = ((($365)) + 12|0);
          store4($490,$365);
          $491 = ((($365)) + 8|0);
          store4($491,$365);
          break;
         }
         $492 = load4($480);
         $493 = ((($492)) + 4|0);
         $494 = load4($493);
         $495 = $494 & -8;
         $496 = ($495|0)==($$4349$lcssa$i|0);
         L229: do {
          if ($496) {
           $$0343$lcssa$i = $492;
          } else {
           $497 = ($$0360$i|0)==(31);
           $498 = $$0360$i >>> 1;
           $499 = (25 - ($498))|0;
           $500 = $497 ? 0 : $499;
           $501 = $$4349$lcssa$i << $500;
           $$034217$i = $501;$$034316$i = $492;
           while(1) {
            $508 = $$034217$i >>> 31;
            $509 = (((($$034316$i)) + 16|0) + ($508<<2)|0);
            $504 = load4($509);
            $510 = ($504|0)==(0|0);
            if ($510) {
             break;
            }
            $502 = $$034217$i << 1;
            $503 = ((($504)) + 4|0);
            $505 = load4($503);
            $506 = $505 & -8;
            $507 = ($506|0)==($$4349$lcssa$i|0);
            if ($507) {
             $$0343$lcssa$i = $504;
             break L229;
            } else {
             $$034217$i = $502;$$034316$i = $504;
            }
           }
           $511 = load4((452136));
           $512 = ($511>>>0)>($509>>>0);
           if ($512) {
            _abort();
            // unreachable;
           } else {
            store4($509,$365);
            $513 = ((($365)) + 24|0);
            store4($513,$$034316$i);
            $514 = ((($365)) + 12|0);
            store4($514,$365);
            $515 = ((($365)) + 8|0);
            store4($515,$365);
            break L211;
           }
          }
         } while(0);
         $516 = ((($$0343$lcssa$i)) + 8|0);
         $517 = load4($516);
         $518 = load4((452136));
         $519 = ($518>>>0)<=($$0343$lcssa$i>>>0);
         $520 = ($518>>>0)<=($517>>>0);
         $521 = $520 & $519;
         if ($521) {
          $522 = ((($517)) + 12|0);
          store4($522,$365);
          store4($516,$365);
          $523 = ((($365)) + 8|0);
          store4($523,$517);
          $524 = ((($365)) + 12|0);
          store4($524,$$0343$lcssa$i);
          $525 = ((($365)) + 24|0);
          store4($525,0);
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $526 = ((($$4$lcssa$i)) + 8|0);
       $$2 = $526;
      } else {
       $$0198 = $263;
       label = 163;
      }
     }
    }
   }
  }
 } while(0);
 L243: do {
  if ((label|0) == 163) {
   $527 = load4((452128));
   $528 = ($527>>>0)<($$0198>>>0);
   if (!($528)) {
    $529 = (($527) - ($$0198))|0;
    $530 = load4((452140));
    $531 = ($529>>>0)>(15);
    if ($531) {
     $532 = (($530) + ($$0198)|0);
     store4((452140),$532);
     store4((452128),$529);
     $533 = $529 | 1;
     $534 = ((($532)) + 4|0);
     store4($534,$533);
     $535 = (($530) + ($527)|0);
     store4($535,$529);
     $536 = $$0198 | 3;
     $537 = ((($530)) + 4|0);
     store4($537,$536);
    } else {
     store4((452128),0);
     store4((452140),0);
     $538 = $527 | 3;
     $539 = ((($530)) + 4|0);
     store4($539,$538);
     $540 = (($530) + ($527)|0);
     $541 = ((($540)) + 4|0);
     $542 = load4($541);
     $543 = $542 | 1;
     store4($541,$543);
    }
    $544 = ((($530)) + 8|0);
    $$2 = $544;
    break;
   }
   $545 = load4((452132));
   $546 = ($545>>>0)>($$0198>>>0);
   if ($546) {
    $547 = (($545) - ($$0198))|0;
    store4((452132),$547);
    $548 = load4((452144));
    $549 = (($548) + ($$0198)|0);
    store4((452144),$549);
    $550 = $547 | 1;
    $551 = ((($549)) + 4|0);
    store4($551,$550);
    $552 = $$0198 | 3;
    $553 = ((($548)) + 4|0);
    store4($553,$552);
    $554 = ((($548)) + 8|0);
    $$2 = $554;
    break;
   }
   $555 = load4(452068);
   $556 = ($555|0)==(0);
   if ($556) {
    (___pthread_mutex_lock(452092)|0);
    $557 = load4(452068);
    $558 = ($557|0)==(0);
    if ($558) {
     store4((452076),4096);
     store4((452072),4096);
     store4((452080),-1);
     store4((452084),-1);
     store4((452088),2);
     store4((452564),2);
     $559 = (_pthread_mutexattr_init($1)|0);
     $560 = ($559|0)==(0);
     if ($560) {
      $561 = (_pthread_mutex_init((452568),$1)|0);
      $562 = ($561|0)==(0);
      if ($562) {
      }
     }
     $563 = $2;
     $564 = $563 & -16;
     $565 = $564 ^ 1431655768;
     Atomics_store(HEAP32,113017,$565)|0;
    }
    (___pthread_mutex_unlock(452092)|0);
   }
   $566 = (($$0198) + 48)|0;
   $567 = load4((452076));
   $568 = (($$0198) + 47)|0;
   $569 = (($567) + ($568))|0;
   $570 = (0 - ($567))|0;
   $571 = $569 & $570;
   $572 = ($571>>>0)>($$0198>>>0);
   if ($572) {
    $573 = load4((452560));
    $574 = ($573|0)==(0);
    if (!($574)) {
     $575 = load4((452552));
     $576 = (($575) + ($571))|0;
     $577 = ($576>>>0)<=($575>>>0);
     $578 = ($576>>>0)>($573>>>0);
     $or$cond1$i = $577 | $578;
     if ($or$cond1$i) {
      $$2 = 0;
      break;
     }
    }
    $579 = load4((452564));
    $580 = $579 & 4;
    $581 = ($580|0)==(0);
    if ($581) {
     $582 = load4((452144));
     $583 = ($582|0)==(0|0);
     L271: do {
      if ($583) {
       label = 186;
      } else {
       $$0$i$i = (452596);
       while(1) {
        $584 = load4($$0$i$i);
        $585 = ($584>>>0)>($582>>>0);
        if (!($585)) {
         $586 = ((($$0$i$i)) + 4|0);
         $587 = load4($586);
         $588 = (($584) + ($587)|0);
         $589 = ($588>>>0)>($582>>>0);
         if ($589) {
          break;
         }
        }
        $590 = ((($$0$i$i)) + 8|0);
        $591 = load4($590);
        $592 = ($591|0)==(0|0);
        if ($592) {
         label = 186;
         break L271;
        } else {
         $$0$i$i = $591;
        }
       }
       (___pthread_mutex_lock(452092)|0);
       $615 = load4((452132));
       $616 = load4((452076));
       $617 = (($568) - ($615))|0;
       $618 = (($617) + ($616))|0;
       $619 = (0 - ($616))|0;
       $620 = $618 & $619;
       $621 = ($620>>>0)<(2147483647);
       if ($621) {
        $622 = ((($$0$i$i)) + 4|0);
        $623 = (_sbrk(($620|0))|0);
        $624 = load4($$0$i$i);
        $625 = load4($622);
        $626 = (($624) + ($625)|0);
        $627 = ($623|0)==($626|0);
        if ($627) {
         $628 = ($623|0)==((-1)|0);
         if ($628) {
          $$2234243136$i = $620;
          label = 200;
         } else {
          $$3229$i = $623;$$3235$i = $620;
         }
        } else {
         $$2247$ph$i = $623;$$2253$ph$i = $620;
         label = 194;
        }
       } else {
        $$2234243136$i = 0;
        label = 200;
       }
      }
     } while(0);
     do {
      if ((label|0) == 186) {
       (___pthread_mutex_lock(452092)|0);
       $593 = (_sbrk(0)|0);
       $594 = ($593|0)==((-1)|0);
       if ($594) {
        $$2234243136$i = 0;
        label = 200;
       } else {
        $595 = $593;
        $596 = load4((452072));
        $597 = (($596) + -1)|0;
        $598 = $597 & $595;
        $599 = ($598|0)==(0);
        $600 = (($597) + ($595))|0;
        $601 = (0 - ($596))|0;
        $602 = $600 & $601;
        $603 = (($602) - ($595))|0;
        $604 = $599 ? 0 : $603;
        $spec$select42$i = (($604) + ($571))|0;
        $605 = load4((452552));
        $606 = (($spec$select42$i) + ($605))|0;
        $607 = ($spec$select42$i>>>0)>($$0198>>>0);
        $608 = ($spec$select42$i>>>0)<(2147483647);
        $or$cond$i212 = $607 & $608;
        if ($or$cond$i212) {
         $609 = load4((452560));
         $610 = ($609|0)==(0);
         if (!($610)) {
          $611 = ($606>>>0)<=($605>>>0);
          $612 = ($606>>>0)>($609>>>0);
          $or$cond2$i213 = $611 | $612;
          if ($or$cond2$i213) {
           $$2234243136$i = 0;
           label = 200;
           break;
          }
         }
         $613 = (_sbrk(($spec$select42$i|0))|0);
         $614 = ($613|0)==($593|0);
         if ($614) {
          $$3229$i = $593;$$3235$i = $spec$select42$i;
         } else {
          $$2247$ph$i = $613;$$2253$ph$i = $spec$select42$i;
          label = 194;
         }
        } else {
         $$2234243136$i = 0;
         label = 200;
        }
       }
      }
     } while(0);
     do {
      if ((label|0) == 194) {
       $629 = (0 - ($$2253$ph$i))|0;
       $630 = ($$2247$ph$i|0)!=((-1)|0);
       $631 = ($$2253$ph$i>>>0)<(2147483647);
       $or$cond7$i = $631 & $630;
       $632 = ($566>>>0)>($$2253$ph$i>>>0);
       $or$cond6$i = $632 & $or$cond7$i;
       if (!($or$cond6$i)) {
        $642 = ($$2247$ph$i|0)==((-1)|0);
        if ($642) {
         $$2234243136$i = 0;
         label = 200;
         break;
        } else {
         $$3229$i = $$2247$ph$i;$$3235$i = $$2253$ph$i;
         break;
        }
       }
       $633 = load4((452076));
       $634 = (($568) - ($$2253$ph$i))|0;
       $635 = (($634) + ($633))|0;
       $636 = (0 - ($633))|0;
       $637 = $635 & $636;
       $638 = ($637>>>0)<(2147483647);
       if ($638) {
        $639 = (_sbrk(($637|0))|0);
        $640 = ($639|0)==((-1)|0);
        if ($640) {
         (_sbrk(($629|0))|0);
         $$2234243136$i = 0;
         label = 200;
         break;
        } else {
         $641 = (($637) + ($$2253$ph$i))|0;
         $$3229$i = $$2247$ph$i;$$3235$i = $641;
         break;
        }
       } else {
        $$3229$i = $$2247$ph$i;$$3235$i = $$2253$ph$i;
       }
      }
     } while(0);
     if ((label|0) == 200) {
      $643 = load4((452564));
      $644 = $643 | 4;
      store4((452564),$644);
      $$3229$i = (-1);$$3235$i = $$2234243136$i;
     }
     (___pthread_mutex_unlock(452092)|0);
     $$4230$i = $$3229$i;$$4236$i = $$3235$i;
    } else {
     $$4230$i = (-1);$$4236$i = 0;
    }
    $645 = ($$4230$i|0)==((-1)|0);
    $646 = ($571>>>0)<(2147483647);
    $or$cond9$i = $646 & $645;
    if ($or$cond9$i) {
     (___pthread_mutex_lock(452092)|0);
     $647 = (_sbrk(($571|0))|0);
     $648 = (_sbrk(0)|0);
     (___pthread_mutex_unlock(452092)|0);
     $649 = ($647|0)!=((-1)|0);
     $650 = ($648|0)!=((-1)|0);
     $or$cond5$i = $649 & $650;
     $651 = ($647>>>0)<($648>>>0);
     $or$cond8$i = $651 & $or$cond5$i;
     $652 = $648;
     $653 = $647;
     $654 = (($652) - ($653))|0;
     $655 = (($$0198) + 40)|0;
     $656 = ($654>>>0)>($655>>>0);
     $spec$select9$i = $656 ? $654 : $$4236$i;
     $spec$select10$i = $656 ? $647 : (-1);
     if ($or$cond8$i) {
      $$7$i = $spec$select10$i;$$7239$i = $spec$select9$i;
      label = 204;
     }
    } else {
     $$7$i = $$4230$i;$$7239$i = $$4236$i;
     label = 204;
    }
    if ((label|0) == 204) {
     $657 = ($$7$i|0)==((-1)|0);
     if (!($657)) {
      $658 = load4((452552));
      $659 = (($658) + ($$7239$i))|0;
      store4((452552),$659);
      $660 = load4((452556));
      $661 = ($659>>>0)>($660>>>0);
      if ($661) {
       store4((452556),$659);
      }
      $662 = load4((452144));
      $663 = ($662|0)==(0|0);
      L309: do {
       if ($663) {
        $664 = load4((452136));
        $665 = ($664|0)==(0|0);
        $666 = ($$7$i>>>0)<($664>>>0);
        $or$cond11$i = $665 | $666;
        if ($or$cond11$i) {
         store4((452136),$$7$i);
        }
        store4((452596),$$7$i);
        store4((452600),$$7239$i);
        store4((452608),0);
        $667 = load4(452068);
        store4((452156),$667);
        store4((452152),-1);
        store4((452172),(452160));
        store4((452168),(452160));
        store4((452180),(452168));
        store4((452176),(452168));
        store4((452188),(452176));
        store4((452184),(452176));
        store4((452196),(452184));
        store4((452192),(452184));
        store4((452204),(452192));
        store4((452200),(452192));
        store4((452212),(452200));
        store4((452208),(452200));
        store4((452220),(452208));
        store4((452216),(452208));
        store4((452228),(452216));
        store4((452224),(452216));
        store4((452236),(452224));
        store4((452232),(452224));
        store4((452244),(452232));
        store4((452240),(452232));
        store4((452252),(452240));
        store4((452248),(452240));
        store4((452260),(452248));
        store4((452256),(452248));
        store4((452268),(452256));
        store4((452264),(452256));
        store4((452276),(452264));
        store4((452272),(452264));
        store4((452284),(452272));
        store4((452280),(452272));
        store4((452292),(452280));
        store4((452288),(452280));
        store4((452300),(452288));
        store4((452296),(452288));
        store4((452308),(452296));
        store4((452304),(452296));
        store4((452316),(452304));
        store4((452312),(452304));
        store4((452324),(452312));
        store4((452320),(452312));
        store4((452332),(452320));
        store4((452328),(452320));
        store4((452340),(452328));
        store4((452336),(452328));
        store4((452348),(452336));
        store4((452344),(452336));
        store4((452356),(452344));
        store4((452352),(452344));
        store4((452364),(452352));
        store4((452360),(452352));
        store4((452372),(452360));
        store4((452368),(452360));
        store4((452380),(452368));
        store4((452376),(452368));
        store4((452388),(452376));
        store4((452384),(452376));
        store4((452396),(452384));
        store4((452392),(452384));
        store4((452404),(452392));
        store4((452400),(452392));
        store4((452412),(452400));
        store4((452408),(452400));
        store4((452420),(452408));
        store4((452416),(452408));
        $668 = (($$7239$i) + -40)|0;
        $669 = ((($$7$i)) + 8|0);
        $670 = $669;
        $671 = $670 & 7;
        $672 = ($671|0)==(0);
        $673 = (0 - ($670))|0;
        $674 = $673 & 7;
        $675 = $672 ? 0 : $674;
        $676 = (($$7$i) + ($675)|0);
        $677 = (($668) - ($675))|0;
        store4((452144),$676);
        store4((452132),$677);
        $678 = $677 | 1;
        $679 = ((($676)) + 4|0);
        store4($679,$678);
        $680 = (($$7$i) + ($668)|0);
        $681 = ((($680)) + 4|0);
        store4($681,40);
        $682 = load4((452084));
        store4((452148),$682);
       } else {
        $$024364$i = (452596);
        while(1) {
         $683 = load4($$024364$i);
         $684 = ((($$024364$i)) + 4|0);
         $685 = load4($684);
         $686 = (($683) + ($685)|0);
         $687 = ($$7$i|0)==($686|0);
         if ($687) {
          label = 214;
          break;
         }
         $688 = ((($$024364$i)) + 8|0);
         $689 = load4($688);
         $690 = ($689|0)==(0|0);
         if ($690) {
          break;
         } else {
          $$024364$i = $689;
         }
        }
        if ((label|0) == 214) {
         $691 = ((($$024364$i)) + 4|0);
         $692 = ((($$024364$i)) + 12|0);
         $693 = load4($692);
         $694 = $693 & 8;
         $695 = ($694|0)==(0);
         if ($695) {
          $696 = ($683>>>0)<=($662>>>0);
          $697 = ($$7$i>>>0)>($662>>>0);
          $or$cond43$i = $697 & $696;
          if ($or$cond43$i) {
           $698 = (($685) + ($$7239$i))|0;
           store4($691,$698);
           $699 = load4((452132));
           $700 = (($699) + ($$7239$i))|0;
           $701 = ((($662)) + 8|0);
           $702 = $701;
           $703 = $702 & 7;
           $704 = ($703|0)==(0);
           $705 = (0 - ($702))|0;
           $706 = $705 & 7;
           $707 = $704 ? 0 : $706;
           $708 = (($662) + ($707)|0);
           $709 = (($700) - ($707))|0;
           store4((452144),$708);
           store4((452132),$709);
           $710 = $709 | 1;
           $711 = ((($708)) + 4|0);
           store4($711,$710);
           $712 = (($662) + ($700)|0);
           $713 = ((($712)) + 4|0);
           store4($713,40);
           $714 = load4((452084));
           store4((452148),$714);
           break;
          }
         }
        }
        $715 = load4((452136));
        $716 = ($$7$i>>>0)<($715>>>0);
        if ($716) {
         store4((452136),$$7$i);
         $779 = $$7$i;
        } else {
         $779 = $715;
        }
        $717 = (($$7$i) + ($$7239$i)|0);
        $$124463$i = (452596);
        while(1) {
         $718 = load4($$124463$i);
         $719 = ($718|0)==($717|0);
         if ($719) {
          label = 222;
          break;
         }
         $720 = ((($$124463$i)) + 8|0);
         $721 = load4($720);
         $722 = ($721|0)==(0|0);
         if ($722) {
          break;
         } else {
          $$124463$i = $721;
         }
        }
        if ((label|0) == 222) {
         $723 = ((($$124463$i)) + 12|0);
         $724 = load4($723);
         $725 = $724 & 8;
         $726 = ($725|0)==(0);
         if ($726) {
          store4($$124463$i,$$7$i);
          $727 = ((($$124463$i)) + 4|0);
          $728 = load4($727);
          $729 = (($728) + ($$7239$i))|0;
          store4($727,$729);
          $730 = ((($$7$i)) + 8|0);
          $731 = $730;
          $732 = $731 & 7;
          $733 = ($732|0)==(0);
          $734 = (0 - ($731))|0;
          $735 = $734 & 7;
          $736 = $733 ? 0 : $735;
          $737 = (($$7$i) + ($736)|0);
          $738 = ((($717)) + 8|0);
          $739 = $738;
          $740 = $739 & 7;
          $741 = ($740|0)==(0);
          $742 = (0 - ($739))|0;
          $743 = $742 & 7;
          $744 = $741 ? 0 : $743;
          $745 = (($717) + ($744)|0);
          $746 = $745;
          $747 = $737;
          $748 = (($746) - ($747))|0;
          $749 = (($737) + ($$0198)|0);
          $750 = (($748) - ($$0198))|0;
          $751 = $$0198 | 3;
          $752 = ((($737)) + 4|0);
          store4($752,$751);
          $753 = ($662|0)==($745|0);
          L332: do {
           if ($753) {
            $754 = load4((452132));
            $755 = (($754) + ($750))|0;
            store4((452132),$755);
            store4((452144),$749);
            $756 = $755 | 1;
            $757 = ((($749)) + 4|0);
            store4($757,$756);
           } else {
            $758 = load4((452140));
            $759 = ($758|0)==($745|0);
            if ($759) {
             $760 = load4((452128));
             $761 = (($760) + ($750))|0;
             store4((452128),$761);
             store4((452140),$749);
             $762 = $761 | 1;
             $763 = ((($749)) + 4|0);
             store4($763,$762);
             $764 = (($749) + ($761)|0);
             store4($764,$761);
             break;
            }
            $765 = ((($745)) + 4|0);
            $766 = load4($765);
            $767 = $766 & 3;
            $768 = ($767|0)==(1);
            if ($768) {
             $769 = $766 & -8;
             $770 = $766 >>> 3;
             $771 = ($766>>>0)<(256);
             L340: do {
              if ($771) {
               $772 = ((($745)) + 8|0);
               $773 = load4($772);
               $774 = ((($745)) + 12|0);
               $775 = load4($774);
               $776 = $770 << 1;
               $777 = (452160 + ($776<<2)|0);
               $778 = ($773|0)==($777|0);
               do {
                if (!($778)) {
                 $780 = ($779>>>0)>($773>>>0);
                 if ($780) {
                  _abort();
                  // unreachable;
                 }
                 $781 = ((($773)) + 12|0);
                 $782 = load4($781);
                 $783 = ($782|0)==($745|0);
                 if ($783) {
                  break;
                 }
                 _abort();
                 // unreachable;
                }
               } while(0);
               $784 = ($775|0)==($773|0);
               if ($784) {
                $785 = 1 << $770;
                $786 = $785 ^ -1;
                $787 = load4(452120);
                $788 = $787 & $786;
                store4(452120,$788);
                break;
               }
               $789 = ($775|0)==($777|0);
               do {
                if ($789) {
                 $$pre16$i$i = ((($775)) + 8|0);
                 $$pre$phi17$i$iZ2D = $$pre16$i$i;
                } else {
                 $790 = ($779>>>0)>($775>>>0);
                 if ($790) {
                  _abort();
                  // unreachable;
                 }
                 $791 = ((($775)) + 8|0);
                 $792 = load4($791);
                 $793 = ($792|0)==($745|0);
                 if ($793) {
                  $$pre$phi17$i$iZ2D = $791;
                  break;
                 }
                 _abort();
                 // unreachable;
                }
               } while(0);
               $794 = ((($773)) + 12|0);
               store4($794,$775);
               store4($$pre$phi17$i$iZ2D,$773);
              } else {
               $795 = ((($745)) + 24|0);
               $796 = load4($795);
               $797 = ((($745)) + 12|0);
               $798 = load4($797);
               $799 = ($798|0)==($745|0);
               do {
                if ($799) {
                 $809 = ((($745)) + 16|0);
                 $810 = ((($809)) + 4|0);
                 $811 = load4($810);
                 $812 = ($811|0)==(0|0);
                 if ($812) {
                  $813 = load4($809);
                  $814 = ($813|0)==(0|0);
                  if ($814) {
                   $$3$i$i = 0;
                   break;
                  } else {
                   $$1290$i$i$ph = $813;$$1292$i$i$ph = $809;
                  }
                 } else {
                  $$1290$i$i$ph = $811;$$1292$i$i$ph = $810;
                 }
                 $$1290$i$i = $$1290$i$i$ph;$$1292$i$i = $$1292$i$i$ph;
                 while(1) {
                  $815 = ((($$1290$i$i)) + 20|0);
                  $816 = load4($815);
                  $817 = ($816|0)==(0|0);
                  if ($817) {
                   $818 = ((($$1290$i$i)) + 16|0);
                   $819 = load4($818);
                   $820 = ($819|0)==(0|0);
                   if ($820) {
                    break;
                   } else {
                    $$1290$i$i$be = $819;$$1292$i$i$be = $818;
                   }
                  } else {
                   $$1290$i$i$be = $816;$$1292$i$i$be = $815;
                  }
                  $$1290$i$i = $$1290$i$i$be;$$1292$i$i = $$1292$i$i$be;
                 }
                 $821 = ($779>>>0)>($$1292$i$i>>>0);
                 if ($821) {
                  _abort();
                  // unreachable;
                 } else {
                  store4($$1292$i$i,0);
                  $$3$i$i = $$1290$i$i;
                  break;
                 }
                } else {
                 $800 = ((($745)) + 8|0);
                 $801 = load4($800);
                 $802 = ($779>>>0)>($801>>>0);
                 if ($802) {
                  _abort();
                  // unreachable;
                 }
                 $803 = ((($801)) + 12|0);
                 $804 = load4($803);
                 $805 = ($804|0)==($745|0);
                 if (!($805)) {
                  _abort();
                  // unreachable;
                 }
                 $806 = ((($798)) + 8|0);
                 $807 = load4($806);
                 $808 = ($807|0)==($745|0);
                 if ($808) {
                  store4($803,$798);
                  store4($806,$801);
                  $$3$i$i = $798;
                  break;
                 } else {
                  _abort();
                  // unreachable;
                 }
                }
               } while(0);
               $822 = ($796|0)==(0|0);
               if ($822) {
                break;
               }
               $823 = ((($745)) + 28|0);
               $824 = load4($823);
               $825 = (452424 + ($824<<2)|0);
               $826 = load4($825);
               $827 = ($826|0)==($745|0);
               do {
                if ($827) {
                 store4($825,$$3$i$i);
                 $cond$i$i = ($$3$i$i|0)==(0|0);
                 if (!($cond$i$i)) {
                  break;
                 }
                 $828 = 1 << $824;
                 $829 = $828 ^ -1;
                 $830 = load4((452124));
                 $831 = $830 & $829;
                 store4((452124),$831);
                 break L340;
                } else {
                 $832 = load4((452136));
                 $833 = ($832>>>0)>($796>>>0);
                 if ($833) {
                  _abort();
                  // unreachable;
                 } else {
                  $834 = ((($796)) + 16|0);
                  $835 = load4($834);
                  $836 = ($835|0)==($745|0);
                  $837 = ((($796)) + 20|0);
                  $$sink325 = $836 ? $834 : $837;
                  store4($$sink325,$$3$i$i);
                  $838 = ($$3$i$i|0)==(0|0);
                  if ($838) {
                   break L340;
                  } else {
                   break;
                  }
                 }
                }
               } while(0);
               $839 = load4((452136));
               $840 = ($839>>>0)>($$3$i$i>>>0);
               if ($840) {
                _abort();
                // unreachable;
               }
               $841 = ((($$3$i$i)) + 24|0);
               store4($841,$796);
               $842 = ((($745)) + 16|0);
               $843 = load4($842);
               $844 = ($843|0)==(0|0);
               do {
                if (!($844)) {
                 $845 = ($839>>>0)>($843>>>0);
                 if ($845) {
                  _abort();
                  // unreachable;
                 } else {
                  $846 = ((($$3$i$i)) + 16|0);
                  store4($846,$843);
                  $847 = ((($843)) + 24|0);
                  store4($847,$$3$i$i);
                  break;
                 }
                }
               } while(0);
               $848 = ((($842)) + 4|0);
               $849 = load4($848);
               $850 = ($849|0)==(0|0);
               if ($850) {
                break;
               }
               $851 = load4((452136));
               $852 = ($851>>>0)>($849>>>0);
               if ($852) {
                _abort();
                // unreachable;
               } else {
                $853 = ((($$3$i$i)) + 20|0);
                store4($853,$849);
                $854 = ((($849)) + 24|0);
                store4($854,$$3$i$i);
                break;
               }
              }
             } while(0);
             $855 = (($745) + ($769)|0);
             $856 = (($769) + ($750))|0;
             $$0$i16$i = $855;$$0286$i$i = $856;
            } else {
             $$0$i16$i = $745;$$0286$i$i = $750;
            }
            $857 = ((($$0$i16$i)) + 4|0);
            $858 = load4($857);
            $859 = $858 & -2;
            store4($857,$859);
            $860 = $$0286$i$i | 1;
            $861 = ((($749)) + 4|0);
            store4($861,$860);
            $862 = (($749) + ($$0286$i$i)|0);
            store4($862,$$0286$i$i);
            $863 = $$0286$i$i >>> 3;
            $864 = ($$0286$i$i>>>0)<(256);
            if ($864) {
             $865 = $863 << 1;
             $866 = (452160 + ($865<<2)|0);
             $867 = load4(452120);
             $868 = 1 << $863;
             $869 = $867 & $868;
             $870 = ($869|0)==(0);
             do {
              if ($870) {
               $871 = $867 | $868;
               store4(452120,$871);
               $$pre$i$i = ((($866)) + 8|0);
               $$0294$i$i = $866;$$pre$phi$i$iZ2D = $$pre$i$i;
              } else {
               $872 = ((($866)) + 8|0);
               $873 = load4($872);
               $874 = load4((452136));
               $875 = ($874>>>0)>($873>>>0);
               if (!($875)) {
                $$0294$i$i = $873;$$pre$phi$i$iZ2D = $872;
                break;
               }
               _abort();
               // unreachable;
              }
             } while(0);
             store4($$pre$phi$i$iZ2D,$749);
             $876 = ((($$0294$i$i)) + 12|0);
             store4($876,$749);
             $877 = ((($749)) + 8|0);
             store4($877,$$0294$i$i);
             $878 = ((($749)) + 12|0);
             store4($878,$866);
             break;
            }
            $879 = $$0286$i$i >>> 8;
            $880 = ($879|0)==(0);
            do {
             if ($880) {
              $$0295$i$i = 0;
             } else {
              $881 = ($$0286$i$i>>>0)>(16777215);
              if ($881) {
               $$0295$i$i = 31;
               break;
              }
              $882 = (($879) + 1048320)|0;
              $883 = $882 >>> 16;
              $884 = $883 & 8;
              $885 = $879 << $884;
              $886 = (($885) + 520192)|0;
              $887 = $886 >>> 16;
              $888 = $887 & 4;
              $889 = $888 | $884;
              $890 = $885 << $888;
              $891 = (($890) + 245760)|0;
              $892 = $891 >>> 16;
              $893 = $892 & 2;
              $894 = $889 | $893;
              $895 = (14 - ($894))|0;
              $896 = $890 << $893;
              $897 = $896 >>> 15;
              $898 = (($895) + ($897))|0;
              $899 = $898 << 1;
              $900 = (($898) + 7)|0;
              $901 = $$0286$i$i >>> $900;
              $902 = $901 & 1;
              $903 = $902 | $899;
              $$0295$i$i = $903;
             }
            } while(0);
            $904 = (452424 + ($$0295$i$i<<2)|0);
            $905 = ((($749)) + 28|0);
            store4($905,$$0295$i$i);
            $906 = ((($749)) + 16|0);
            $907 = ((($906)) + 4|0);
            store4($907,0);
            store4($906,0);
            $908 = load4((452124));
            $909 = 1 << $$0295$i$i;
            $910 = $908 & $909;
            $911 = ($910|0)==(0);
            if ($911) {
             $912 = $908 | $909;
             store4((452124),$912);
             store4($904,$749);
             $913 = ((($749)) + 24|0);
             store4($913,$904);
             $914 = ((($749)) + 12|0);
             store4($914,$749);
             $915 = ((($749)) + 8|0);
             store4($915,$749);
             break;
            }
            $916 = load4($904);
            $917 = ((($916)) + 4|0);
            $918 = load4($917);
            $919 = $918 & -8;
            $920 = ($919|0)==($$0286$i$i|0);
            L425: do {
             if ($920) {
              $$0288$lcssa$i$i = $916;
             } else {
              $921 = ($$0295$i$i|0)==(31);
              $922 = $$0295$i$i >>> 1;
              $923 = (25 - ($922))|0;
              $924 = $921 ? 0 : $923;
              $925 = $$0286$i$i << $924;
              $$028711$i$i = $925;$$028810$i$i = $916;
              while(1) {
               $932 = $$028711$i$i >>> 31;
               $933 = (((($$028810$i$i)) + 16|0) + ($932<<2)|0);
               $928 = load4($933);
               $934 = ($928|0)==(0|0);
               if ($934) {
                break;
               }
               $926 = $$028711$i$i << 1;
               $927 = ((($928)) + 4|0);
               $929 = load4($927);
               $930 = $929 & -8;
               $931 = ($930|0)==($$0286$i$i|0);
               if ($931) {
                $$0288$lcssa$i$i = $928;
                break L425;
               } else {
                $$028711$i$i = $926;$$028810$i$i = $928;
               }
              }
              $935 = load4((452136));
              $936 = ($935>>>0)>($933>>>0);
              if ($936) {
               _abort();
               // unreachable;
              } else {
               store4($933,$749);
               $937 = ((($749)) + 24|0);
               store4($937,$$028810$i$i);
               $938 = ((($749)) + 12|0);
               store4($938,$749);
               $939 = ((($749)) + 8|0);
               store4($939,$749);
               break L332;
              }
             }
            } while(0);
            $940 = ((($$0288$lcssa$i$i)) + 8|0);
            $941 = load4($940);
            $942 = load4((452136));
            $943 = ($942>>>0)<=($$0288$lcssa$i$i>>>0);
            $944 = ($942>>>0)<=($941>>>0);
            $945 = $944 & $943;
            if ($945) {
             $946 = ((($941)) + 12|0);
             store4($946,$749);
             store4($940,$749);
             $947 = ((($749)) + 8|0);
             store4($947,$941);
             $948 = ((($749)) + 12|0);
             store4($948,$$0288$lcssa$i$i);
             $949 = ((($749)) + 24|0);
             store4($949,0);
             break;
            } else {
             _abort();
             // unreachable;
            }
           }
          } while(0);
          $1086 = ((($737)) + 8|0);
          $$2 = $1086;
          break L243;
         }
        }
        $$0$i$i$i = (452596);
        while(1) {
         $950 = load4($$0$i$i$i);
         $951 = ($950>>>0)>($662>>>0);
         if (!($951)) {
          $952 = ((($$0$i$i$i)) + 4|0);
          $953 = load4($952);
          $954 = (($950) + ($953)|0);
          $955 = ($954>>>0)>($662>>>0);
          if ($955) {
           break;
          }
         }
         $956 = ((($$0$i$i$i)) + 8|0);
         $957 = load4($956);
         $$0$i$i$i = $957;
        }
        $958 = ((($954)) + -47|0);
        $959 = ((($958)) + 8|0);
        $960 = $959;
        $961 = $960 & 7;
        $962 = ($961|0)==(0);
        $963 = (0 - ($960))|0;
        $964 = $963 & 7;
        $965 = $962 ? 0 : $964;
        $966 = (($958) + ($965)|0);
        $967 = ((($662)) + 16|0);
        $968 = ($966>>>0)<($967>>>0);
        $969 = $968 ? $662 : $966;
        $970 = ((($969)) + 8|0);
        $971 = ((($969)) + 24|0);
        $972 = (($$7239$i) + -40)|0;
        $973 = ((($$7$i)) + 8|0);
        $974 = $973;
        $975 = $974 & 7;
        $976 = ($975|0)==(0);
        $977 = (0 - ($974))|0;
        $978 = $977 & 7;
        $979 = $976 ? 0 : $978;
        $980 = (($$7$i) + ($979)|0);
        $981 = (($972) - ($979))|0;
        store4((452144),$980);
        store4((452132),$981);
        $982 = $981 | 1;
        $983 = ((($980)) + 4|0);
        store4($983,$982);
        $984 = (($$7$i) + ($972)|0);
        $985 = ((($984)) + 4|0);
        store4($985,40);
        $986 = load4((452084));
        store4((452148),$986);
        $987 = ((($969)) + 4|0);
        store4($987,27);
        ; store8($970,load8((452596),4),4); store8($970+8 | 0,load8((452596)+8 | 0,4),4);
        store4((452596),$$7$i);
        store4((452600),$$7239$i);
        store4((452608),0);
        store4((452604),$970);
        $989 = $971;
        while(1) {
         $988 = ((($989)) + 4|0);
         store4($988,7);
         $990 = ((($989)) + 8|0);
         $991 = ($990>>>0)<($954>>>0);
         if ($991) {
          $989 = $988;
         } else {
          break;
         }
        }
        $992 = ($969|0)==($662|0);
        if (!($992)) {
         $993 = $969;
         $994 = $662;
         $995 = (($993) - ($994))|0;
         $996 = load4($987);
         $997 = $996 & -2;
         store4($987,$997);
         $998 = $995 | 1;
         $999 = ((($662)) + 4|0);
         store4($999,$998);
         store4($969,$995);
         $1000 = $995 >>> 3;
         $1001 = ($995>>>0)<(256);
         if ($1001) {
          $1002 = $1000 << 1;
          $1003 = (452160 + ($1002<<2)|0);
          $1004 = load4(452120);
          $1005 = 1 << $1000;
          $1006 = $1004 & $1005;
          $1007 = ($1006|0)==(0);
          do {
           if ($1007) {
            $1008 = $1004 | $1005;
            store4(452120,$1008);
            $$pre$i17$i = ((($1003)) + 8|0);
            $$0211$i$i = $1003;$$pre$phi$i18$iZ2D = $$pre$i17$i;
           } else {
            $1009 = ((($1003)) + 8|0);
            $1010 = load4($1009);
            $1011 = load4((452136));
            $1012 = ($1011>>>0)>($1010>>>0);
            if (!($1012)) {
             $$0211$i$i = $1010;$$pre$phi$i18$iZ2D = $1009;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          store4($$pre$phi$i18$iZ2D,$662);
          $1013 = ((($$0211$i$i)) + 12|0);
          store4($1013,$662);
          $1014 = ((($662)) + 8|0);
          store4($1014,$$0211$i$i);
          $1015 = ((($662)) + 12|0);
          store4($1015,$1003);
          break;
         }
         $1016 = $995 >>> 8;
         $1017 = ($1016|0)==(0);
         do {
          if ($1017) {
           $$0212$i$i = 0;
          } else {
           $1018 = ($995>>>0)>(16777215);
           if ($1018) {
            $$0212$i$i = 31;
            break;
           }
           $1019 = (($1016) + 1048320)|0;
           $1020 = $1019 >>> 16;
           $1021 = $1020 & 8;
           $1022 = $1016 << $1021;
           $1023 = (($1022) + 520192)|0;
           $1024 = $1023 >>> 16;
           $1025 = $1024 & 4;
           $1026 = $1025 | $1021;
           $1027 = $1022 << $1025;
           $1028 = (($1027) + 245760)|0;
           $1029 = $1028 >>> 16;
           $1030 = $1029 & 2;
           $1031 = $1026 | $1030;
           $1032 = (14 - ($1031))|0;
           $1033 = $1027 << $1030;
           $1034 = $1033 >>> 15;
           $1035 = (($1032) + ($1034))|0;
           $1036 = $1035 << 1;
           $1037 = (($1035) + 7)|0;
           $1038 = $995 >>> $1037;
           $1039 = $1038 & 1;
           $1040 = $1039 | $1036;
           $$0212$i$i = $1040;
          }
         } while(0);
         $1041 = (452424 + ($$0212$i$i<<2)|0);
         $1042 = ((($662)) + 28|0);
         store4($1042,$$0212$i$i);
         $1043 = ((($662)) + 20|0);
         store4($1043,0);
         store4($967,0);
         $1044 = load4((452124));
         $1045 = 1 << $$0212$i$i;
         $1046 = $1044 & $1045;
         $1047 = ($1046|0)==(0);
         if ($1047) {
          $1048 = $1044 | $1045;
          store4((452124),$1048);
          store4($1041,$662);
          $1049 = ((($662)) + 24|0);
          store4($1049,$1041);
          $1050 = ((($662)) + 12|0);
          store4($1050,$662);
          $1051 = ((($662)) + 8|0);
          store4($1051,$662);
          break;
         }
         $1052 = load4($1041);
         $1053 = ((($1052)) + 4|0);
         $1054 = load4($1053);
         $1055 = $1054 & -8;
         $1056 = ($1055|0)==($995|0);
         L465: do {
          if ($1056) {
           $$0207$lcssa$i$i = $1052;
          } else {
           $1057 = ($$0212$i$i|0)==(31);
           $1058 = $$0212$i$i >>> 1;
           $1059 = (25 - ($1058))|0;
           $1060 = $1057 ? 0 : $1059;
           $1061 = $995 << $1060;
           $$02065$i$i = $1061;$$02074$i$i = $1052;
           while(1) {
            $1068 = $$02065$i$i >>> 31;
            $1069 = (((($$02074$i$i)) + 16|0) + ($1068<<2)|0);
            $1064 = load4($1069);
            $1070 = ($1064|0)==(0|0);
            if ($1070) {
             break;
            }
            $1062 = $$02065$i$i << 1;
            $1063 = ((($1064)) + 4|0);
            $1065 = load4($1063);
            $1066 = $1065 & -8;
            $1067 = ($1066|0)==($995|0);
            if ($1067) {
             $$0207$lcssa$i$i = $1064;
             break L465;
            } else {
             $$02065$i$i = $1062;$$02074$i$i = $1064;
            }
           }
           $1071 = load4((452136));
           $1072 = ($1071>>>0)>($1069>>>0);
           if ($1072) {
            _abort();
            // unreachable;
           } else {
            store4($1069,$662);
            $1073 = ((($662)) + 24|0);
            store4($1073,$$02074$i$i);
            $1074 = ((($662)) + 12|0);
            store4($1074,$662);
            $1075 = ((($662)) + 8|0);
            store4($1075,$662);
            break L309;
           }
          }
         } while(0);
         $1076 = ((($$0207$lcssa$i$i)) + 8|0);
         $1077 = load4($1076);
         $1078 = load4((452136));
         $1079 = ($1078>>>0)<=($$0207$lcssa$i$i>>>0);
         $1080 = ($1078>>>0)<=($1077>>>0);
         $1081 = $1080 & $1079;
         if ($1081) {
          $1082 = ((($1077)) + 12|0);
          store4($1082,$662);
          store4($1076,$662);
          $1083 = ((($662)) + 8|0);
          store4($1083,$1077);
          $1084 = ((($662)) + 12|0);
          store4($1084,$$0207$lcssa$i$i);
          $1085 = ((($662)) + 24|0);
          store4($1085,0);
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1087 = load4((452132));
      $1088 = ($1087>>>0)>($$0198>>>0);
      if ($1088) {
       $1089 = (($1087) - ($$0198))|0;
       store4((452132),$1089);
       $1090 = load4((452144));
       $1091 = (($1090) + ($$0198)|0);
       store4((452144),$1091);
       $1092 = $1089 | 1;
       $1093 = ((($1091)) + 4|0);
       store4($1093,$1092);
       $1094 = $$0198 | 3;
       $1095 = ((($1090)) + 4|0);
       store4($1095,$1094);
       $1096 = ((($1090)) + 8|0);
       $$2 = $1096;
       break;
      }
     }
    }
    $1097 = (___errno_location()|0);
    store4($1097,12);
    $$2 = 0;
   } else {
    $$2 = 0;
   }
  }
 } while(0);
 $1098 = load4((452564));
 $1099 = $1098 & 2;
 $1100 = ($1099|0)==(0);
 if ($1100) {
  $$1 = $$2;
  STACKTOP = sp;return ($$1|0);
 }
 (___pthread_mutex_unlock((452568))|0);
 $$1 = $$2;
 STACKTOP = sp;return ($$1|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0;
 var $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $$pre443 = 0, $$pre445 = 0, $$sink = 0, $$sink456 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond419 = 0, $cond420 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = load4((452564));
 $4 = $3 & 2;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (___pthread_mutex_lock((452568))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   return;
  }
 }
 $8 = load4((452136));
 $9 = ($2>>>0)<($8>>>0);
 if ($9) {
  _abort();
  // unreachable;
 }
 $10 = ((($0)) + -4|0);
 $11 = load4($10);
 $12 = $11 & 3;
 $13 = ($12|0)==(1);
 if ($13) {
  _abort();
  // unreachable;
 }
 $14 = $11 & -8;
 $15 = (($2) + ($14)|0);
 $16 = $11 & 1;
 $17 = ($16|0)==(0);
 L14: do {
  if ($17) {
   $18 = load4($2);
   $19 = ($12|0)==(0);
   if (!($19)) {
    $20 = (0 - ($18))|0;
    $21 = (($2) + ($20)|0);
    $22 = (($18) + ($14))|0;
    $23 = ($21>>>0)<($8>>>0);
    if ($23) {
     _abort();
     // unreachable;
    }
    $24 = load4((452140));
    $25 = ($24|0)==($21|0);
    if ($25) {
     $110 = ((($15)) + 4|0);
     $111 = load4($110);
     $112 = $111 & 3;
     $113 = ($112|0)==(3);
     if (!($113)) {
      $$1 = $21;$$1380 = $22;$118 = $21;
      label = 57;
      break;
     }
     $114 = (($21) + ($22)|0);
     $115 = ((($21)) + 4|0);
     $116 = $22 | 1;
     $117 = $111 & -2;
     store4((452128),$22);
     store4($110,$117);
     store4($115,$116);
     store4($114,$22);
     break;
    }
    $26 = $18 >>> 3;
    $27 = ($18>>>0)<(256);
    if ($27) {
     $28 = ((($21)) + 8|0);
     $29 = load4($28);
     $30 = ((($21)) + 12|0);
     $31 = load4($30);
     $32 = $26 << 1;
     $33 = (452160 + ($32<<2)|0);
     $34 = ($29|0)==($33|0);
     if (!($34)) {
      $35 = ($8>>>0)>($29>>>0);
      if ($35) {
       _abort();
       // unreachable;
      }
      $36 = ((($29)) + 12|0);
      $37 = load4($36);
      $38 = ($37|0)==($21|0);
      if (!($38)) {
       _abort();
       // unreachable;
      }
     }
     $39 = ($31|0)==($29|0);
     if ($39) {
      $40 = 1 << $26;
      $41 = $40 ^ -1;
      $42 = load4(452120);
      $43 = $42 & $41;
      store4(452120,$43);
      $$1 = $21;$$1380 = $22;$118 = $21;
      label = 57;
      break;
     }
     $44 = ($31|0)==($33|0);
     if ($44) {
      $$pre445 = ((($31)) + 8|0);
      $$pre$phi446Z2D = $$pre445;
     } else {
      $45 = ($8>>>0)>($31>>>0);
      if ($45) {
       _abort();
       // unreachable;
      }
      $46 = ((($31)) + 8|0);
      $47 = load4($46);
      $48 = ($47|0)==($21|0);
      if ($48) {
       $$pre$phi446Z2D = $46;
      } else {
       _abort();
       // unreachable;
      }
     }
     $49 = ((($29)) + 12|0);
     store4($49,$31);
     store4($$pre$phi446Z2D,$29);
     $$1 = $21;$$1380 = $22;$118 = $21;
     label = 57;
     break;
    }
    $50 = ((($21)) + 24|0);
    $51 = load4($50);
    $52 = ((($21)) + 12|0);
    $53 = load4($52);
    $54 = ($53|0)==($21|0);
    do {
     if ($54) {
      $64 = ((($21)) + 16|0);
      $65 = ((($64)) + 4|0);
      $66 = load4($65);
      $67 = ($66|0)==(0|0);
      if ($67) {
       $68 = load4($64);
       $69 = ($68|0)==(0|0);
       if ($69) {
        $$3 = 0;
        break;
       } else {
        $$1385$ph = $68;$$1388$ph = $64;
       }
      } else {
       $$1385$ph = $66;$$1388$ph = $65;
      }
      $$1385 = $$1385$ph;$$1388 = $$1388$ph;
      while(1) {
       $70 = ((($$1385)) + 20|0);
       $71 = load4($70);
       $72 = ($71|0)==(0|0);
       if ($72) {
        $73 = ((($$1385)) + 16|0);
        $74 = load4($73);
        $75 = ($74|0)==(0|0);
        if ($75) {
         break;
        } else {
         $$1385$be = $74;$$1388$be = $73;
        }
       } else {
        $$1385$be = $71;$$1388$be = $70;
       }
       $$1385 = $$1385$be;$$1388 = $$1388$be;
      }
      $76 = ($8>>>0)>($$1388>>>0);
      if ($76) {
       _abort();
       // unreachable;
      } else {
       store4($$1388,0);
       $$3 = $$1385;
       break;
      }
     } else {
      $55 = ((($21)) + 8|0);
      $56 = load4($55);
      $57 = ($8>>>0)>($56>>>0);
      if ($57) {
       _abort();
       // unreachable;
      }
      $58 = ((($56)) + 12|0);
      $59 = load4($58);
      $60 = ($59|0)==($21|0);
      if (!($60)) {
       _abort();
       // unreachable;
      }
      $61 = ((($53)) + 8|0);
      $62 = load4($61);
      $63 = ($62|0)==($21|0);
      if ($63) {
       store4($58,$53);
       store4($61,$56);
       $$3 = $53;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $77 = ($51|0)==(0|0);
    if ($77) {
     $$1 = $21;$$1380 = $22;$118 = $21;
     label = 57;
    } else {
     $78 = ((($21)) + 28|0);
     $79 = load4($78);
     $80 = (452424 + ($79<<2)|0);
     $81 = load4($80);
     $82 = ($81|0)==($21|0);
     do {
      if ($82) {
       store4($80,$$3);
       $cond419 = ($$3|0)==(0|0);
       if ($cond419) {
        $83 = 1 << $79;
        $84 = $83 ^ -1;
        $85 = load4((452124));
        $86 = $85 & $84;
        store4((452124),$86);
        $$1 = $21;$$1380 = $22;$118 = $21;
        label = 57;
        break L14;
       }
      } else {
       $87 = load4((452136));
       $88 = ($87>>>0)>($51>>>0);
       if ($88) {
        _abort();
        // unreachable;
       } else {
        $89 = ((($51)) + 16|0);
        $90 = load4($89);
        $91 = ($90|0)==($21|0);
        $92 = ((($51)) + 20|0);
        $$sink = $91 ? $89 : $92;
        store4($$sink,$$3);
        $93 = ($$3|0)==(0|0);
        if ($93) {
         $$1 = $21;$$1380 = $22;$118 = $21;
         label = 57;
         break L14;
        } else {
         break;
        }
       }
      }
     } while(0);
     $94 = load4((452136));
     $95 = ($94>>>0)>($$3>>>0);
     if ($95) {
      _abort();
      // unreachable;
     }
     $96 = ((($$3)) + 24|0);
     store4($96,$51);
     $97 = ((($21)) + 16|0);
     $98 = load4($97);
     $99 = ($98|0)==(0|0);
     do {
      if (!($99)) {
       $100 = ($94>>>0)>($98>>>0);
       if ($100) {
        _abort();
        // unreachable;
       } else {
        $101 = ((($$3)) + 16|0);
        store4($101,$98);
        $102 = ((($98)) + 24|0);
        store4($102,$$3);
        break;
       }
      }
     } while(0);
     $103 = ((($97)) + 4|0);
     $104 = load4($103);
     $105 = ($104|0)==(0|0);
     if ($105) {
      $$1 = $21;$$1380 = $22;$118 = $21;
      label = 57;
     } else {
      $106 = load4((452136));
      $107 = ($106>>>0)>($104>>>0);
      if ($107) {
       _abort();
       // unreachable;
      } else {
       $108 = ((($$3)) + 20|0);
       store4($108,$104);
       $109 = ((($104)) + 24|0);
       store4($109,$$3);
       $$1 = $21;$$1380 = $22;$118 = $21;
       label = 57;
       break;
      }
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $14;$118 = $2;
   label = 57;
  }
 } while(0);
 do {
  if ((label|0) == 57) {
   $119 = ($118>>>0)<($15>>>0);
   if (!($119)) {
    _abort();
    // unreachable;
   }
   $120 = ((($15)) + 4|0);
   $121 = load4($120);
   $122 = $121 & 1;
   $123 = ($122|0)==(0);
   if ($123) {
    _abort();
    // unreachable;
   }
   $124 = $121 & 2;
   $125 = ($124|0)==(0);
   if ($125) {
    $126 = load4((452144));
    $127 = ($126|0)==($15|0);
    if ($127) {
     $128 = load4((452132));
     $129 = (($128) + ($$1380))|0;
     store4((452132),$129);
     store4((452144),$$1);
     $130 = $129 | 1;
     $131 = ((($$1)) + 4|0);
     store4($131,$130);
     $132 = load4((452140));
     $133 = ($$1|0)==($132|0);
     if (!($133)) {
      break;
     }
     store4((452140),0);
     store4((452128),0);
     break;
    }
    $134 = load4((452140));
    $135 = ($134|0)==($15|0);
    if ($135) {
     $136 = load4((452128));
     $137 = (($136) + ($$1380))|0;
     store4((452128),$137);
     store4((452140),$118);
     $138 = $137 | 1;
     $139 = ((($$1)) + 4|0);
     store4($139,$138);
     $140 = (($118) + ($137)|0);
     store4($140,$137);
     break;
    }
    $141 = $121 & -8;
    $142 = (($141) + ($$1380))|0;
    $143 = $121 >>> 3;
    $144 = ($121>>>0)<(256);
    L109: do {
     if ($144) {
      $145 = ((($15)) + 8|0);
      $146 = load4($145);
      $147 = ((($15)) + 12|0);
      $148 = load4($147);
      $149 = $143 << 1;
      $150 = (452160 + ($149<<2)|0);
      $151 = ($146|0)==($150|0);
      if (!($151)) {
       $152 = load4((452136));
       $153 = ($152>>>0)>($146>>>0);
       if ($153) {
        _abort();
        // unreachable;
       }
       $154 = ((($146)) + 12|0);
       $155 = load4($154);
       $156 = ($155|0)==($15|0);
       if (!($156)) {
        _abort();
        // unreachable;
       }
      }
      $157 = ($148|0)==($146|0);
      if ($157) {
       $158 = 1 << $143;
       $159 = $158 ^ -1;
       $160 = load4(452120);
       $161 = $160 & $159;
       store4(452120,$161);
       break;
      }
      $162 = ($148|0)==($150|0);
      if ($162) {
       $$pre443 = ((($148)) + 8|0);
       $$pre$phi444Z2D = $$pre443;
      } else {
       $163 = load4((452136));
       $164 = ($163>>>0)>($148>>>0);
       if ($164) {
        _abort();
        // unreachable;
       }
       $165 = ((($148)) + 8|0);
       $166 = load4($165);
       $167 = ($166|0)==($15|0);
       if ($167) {
        $$pre$phi444Z2D = $165;
       } else {
        _abort();
        // unreachable;
       }
      }
      $168 = ((($146)) + 12|0);
      store4($168,$148);
      store4($$pre$phi444Z2D,$146);
     } else {
      $169 = ((($15)) + 24|0);
      $170 = load4($169);
      $171 = ((($15)) + 12|0);
      $172 = load4($171);
      $173 = ($172|0)==($15|0);
      do {
       if ($173) {
        $184 = ((($15)) + 16|0);
        $185 = ((($184)) + 4|0);
        $186 = load4($185);
        $187 = ($186|0)==(0|0);
        if ($187) {
         $188 = load4($184);
         $189 = ($188|0)==(0|0);
         if ($189) {
          $$3398 = 0;
          break;
         } else {
          $$1396$ph = $188;$$1400$ph = $184;
         }
        } else {
         $$1396$ph = $186;$$1400$ph = $185;
        }
        $$1396 = $$1396$ph;$$1400 = $$1400$ph;
        while(1) {
         $190 = ((($$1396)) + 20|0);
         $191 = load4($190);
         $192 = ($191|0)==(0|0);
         if ($192) {
          $193 = ((($$1396)) + 16|0);
          $194 = load4($193);
          $195 = ($194|0)==(0|0);
          if ($195) {
           break;
          } else {
           $$1396$be = $194;$$1400$be = $193;
          }
         } else {
          $$1396$be = $191;$$1400$be = $190;
         }
         $$1396 = $$1396$be;$$1400 = $$1400$be;
        }
        $196 = load4((452136));
        $197 = ($196>>>0)>($$1400>>>0);
        if ($197) {
         _abort();
         // unreachable;
        } else {
         store4($$1400,0);
         $$3398 = $$1396;
         break;
        }
       } else {
        $174 = ((($15)) + 8|0);
        $175 = load4($174);
        $176 = load4((452136));
        $177 = ($176>>>0)>($175>>>0);
        if ($177) {
         _abort();
         // unreachable;
        }
        $178 = ((($175)) + 12|0);
        $179 = load4($178);
        $180 = ($179|0)==($15|0);
        if (!($180)) {
         _abort();
         // unreachable;
        }
        $181 = ((($172)) + 8|0);
        $182 = load4($181);
        $183 = ($182|0)==($15|0);
        if ($183) {
         store4($178,$172);
         store4($181,$175);
         $$3398 = $172;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $198 = ($170|0)==(0|0);
      if (!($198)) {
       $199 = ((($15)) + 28|0);
       $200 = load4($199);
       $201 = (452424 + ($200<<2)|0);
       $202 = load4($201);
       $203 = ($202|0)==($15|0);
       do {
        if ($203) {
         store4($201,$$3398);
         $cond420 = ($$3398|0)==(0|0);
         if ($cond420) {
          $204 = 1 << $200;
          $205 = $204 ^ -1;
          $206 = load4((452124));
          $207 = $206 & $205;
          store4((452124),$207);
          break L109;
         }
        } else {
         $208 = load4((452136));
         $209 = ($208>>>0)>($170>>>0);
         if ($209) {
          _abort();
          // unreachable;
         } else {
          $210 = ((($170)) + 16|0);
          $211 = load4($210);
          $212 = ($211|0)==($15|0);
          $213 = ((($170)) + 20|0);
          $$sink456 = $212 ? $210 : $213;
          store4($$sink456,$$3398);
          $214 = ($$3398|0)==(0|0);
          if ($214) {
           break L109;
          } else {
           break;
          }
         }
        }
       } while(0);
       $215 = load4((452136));
       $216 = ($215>>>0)>($$3398>>>0);
       if ($216) {
        _abort();
        // unreachable;
       }
       $217 = ((($$3398)) + 24|0);
       store4($217,$170);
       $218 = ((($15)) + 16|0);
       $219 = load4($218);
       $220 = ($219|0)==(0|0);
       do {
        if (!($220)) {
         $221 = ($215>>>0)>($219>>>0);
         if ($221) {
          _abort();
          // unreachable;
         } else {
          $222 = ((($$3398)) + 16|0);
          store4($222,$219);
          $223 = ((($219)) + 24|0);
          store4($223,$$3398);
          break;
         }
        }
       } while(0);
       $224 = ((($218)) + 4|0);
       $225 = load4($224);
       $226 = ($225|0)==(0|0);
       if (!($226)) {
        $227 = load4((452136));
        $228 = ($227>>>0)>($225>>>0);
        if ($228) {
         _abort();
         // unreachable;
        } else {
         $229 = ((($$3398)) + 20|0);
         store4($229,$225);
         $230 = ((($225)) + 24|0);
         store4($230,$$3398);
         break;
        }
       }
      }
     }
    } while(0);
    $231 = $142 | 1;
    $232 = ((($$1)) + 4|0);
    store4($232,$231);
    $233 = (($118) + ($142)|0);
    store4($233,$142);
    $234 = load4((452140));
    $235 = ($$1|0)==($234|0);
    if ($235) {
     store4((452128),$142);
     break;
    } else {
     $$2 = $142;
    }
   } else {
    $236 = $121 & -2;
    store4($120,$236);
    $237 = $$1380 | 1;
    $238 = ((($$1)) + 4|0);
    store4($238,$237);
    $239 = (($118) + ($$1380)|0);
    store4($239,$$1380);
    $$2 = $$1380;
   }
   $240 = $$2 >>> 3;
   $241 = ($$2>>>0)<(256);
   if ($241) {
    $242 = $240 << 1;
    $243 = (452160 + ($242<<2)|0);
    $244 = load4(452120);
    $245 = 1 << $240;
    $246 = $244 & $245;
    $247 = ($246|0)==(0);
    if ($247) {
     $248 = $244 | $245;
     store4(452120,$248);
     $$pre = ((($243)) + 8|0);
     $$0401 = $243;$$pre$phiZ2D = $$pre;
    } else {
     $249 = ((($243)) + 8|0);
     $250 = load4($249);
     $251 = load4((452136));
     $252 = ($251>>>0)>($250>>>0);
     if ($252) {
      _abort();
      // unreachable;
     } else {
      $$0401 = $250;$$pre$phiZ2D = $249;
     }
    }
    store4($$pre$phiZ2D,$$1);
    $253 = ((($$0401)) + 12|0);
    store4($253,$$1);
    $254 = ((($$1)) + 8|0);
    store4($254,$$0401);
    $255 = ((($$1)) + 12|0);
    store4($255,$243);
    break;
   }
   $256 = $$2 >>> 8;
   $257 = ($256|0)==(0);
   if ($257) {
    $$0394 = 0;
   } else {
    $258 = ($$2>>>0)>(16777215);
    if ($258) {
     $$0394 = 31;
    } else {
     $259 = (($256) + 1048320)|0;
     $260 = $259 >>> 16;
     $261 = $260 & 8;
     $262 = $256 << $261;
     $263 = (($262) + 520192)|0;
     $264 = $263 >>> 16;
     $265 = $264 & 4;
     $266 = $265 | $261;
     $267 = $262 << $265;
     $268 = (($267) + 245760)|0;
     $269 = $268 >>> 16;
     $270 = $269 & 2;
     $271 = $266 | $270;
     $272 = (14 - ($271))|0;
     $273 = $267 << $270;
     $274 = $273 >>> 15;
     $275 = (($272) + ($274))|0;
     $276 = $275 << 1;
     $277 = (($275) + 7)|0;
     $278 = $$2 >>> $277;
     $279 = $278 & 1;
     $280 = $279 | $276;
     $$0394 = $280;
    }
   }
   $281 = (452424 + ($$0394<<2)|0);
   $282 = ((($$1)) + 28|0);
   store4($282,$$0394);
   $283 = ((($$1)) + 16|0);
   $284 = ((($$1)) + 20|0);
   store4($284,0);
   store4($283,0);
   $285 = load4((452124));
   $286 = 1 << $$0394;
   $287 = $285 & $286;
   $288 = ($287|0)==(0);
   L193: do {
    if ($288) {
     $289 = $285 | $286;
     store4((452124),$289);
     store4($281,$$1);
     $290 = ((($$1)) + 24|0);
     store4($290,$281);
     $291 = ((($$1)) + 12|0);
     store4($291,$$1);
     $292 = ((($$1)) + 8|0);
     store4($292,$$1);
    } else {
     $293 = load4($281);
     $294 = ((($293)) + 4|0);
     $295 = load4($294);
     $296 = $295 & -8;
     $297 = ($296|0)==($$2|0);
     L196: do {
      if ($297) {
       $$0382$lcssa = $293;
      } else {
       $298 = ($$0394|0)==(31);
       $299 = $$0394 >>> 1;
       $300 = (25 - ($299))|0;
       $301 = $298 ? 0 : $300;
       $302 = $$2 << $301;
       $$0381438 = $302;$$0382437 = $293;
       while(1) {
        $309 = $$0381438 >>> 31;
        $310 = (((($$0382437)) + 16|0) + ($309<<2)|0);
        $305 = load4($310);
        $311 = ($305|0)==(0|0);
        if ($311) {
         break;
        }
        $303 = $$0381438 << 1;
        $304 = ((($305)) + 4|0);
        $306 = load4($304);
        $307 = $306 & -8;
        $308 = ($307|0)==($$2|0);
        if ($308) {
         $$0382$lcssa = $305;
         break L196;
        } else {
         $$0381438 = $303;$$0382437 = $305;
        }
       }
       $312 = load4((452136));
       $313 = ($312>>>0)>($310>>>0);
       if ($313) {
        _abort();
        // unreachable;
       } else {
        store4($310,$$1);
        $314 = ((($$1)) + 24|0);
        store4($314,$$0382437);
        $315 = ((($$1)) + 12|0);
        store4($315,$$1);
        $316 = ((($$1)) + 8|0);
        store4($316,$$1);
        break L193;
       }
      }
     } while(0);
     $317 = ((($$0382$lcssa)) + 8|0);
     $318 = load4($317);
     $319 = load4((452136));
     $320 = ($319>>>0)<=($$0382$lcssa>>>0);
     $321 = ($319>>>0)<=($318>>>0);
     $322 = $321 & $320;
     if ($322) {
      $323 = ((($318)) + 12|0);
      store4($323,$$1);
      store4($317,$$1);
      $324 = ((($$1)) + 8|0);
      store4($324,$318);
      $325 = ((($$1)) + 12|0);
      store4($325,$$0382$lcssa);
      $326 = ((($$1)) + 24|0);
      store4($326,0);
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $327 = load4((452152));
   $328 = (($327) + -1)|0;
   store4((452152),$328);
   $329 = ($328|0)==(0);
   if ($329) {
    $$0211$in$i = (452604);
    while(1) {
     $$0211$i = load4($$0211$in$i);
     $330 = ($$0211$i|0)==(0|0);
     $331 = ((($$0211$i)) + 8|0);
     if ($330) {
      break;
     } else {
      $$0211$in$i = $331;
     }
    }
    store4((452152),-1);
   }
  }
 } while(0);
 $332 = load4((452564));
 $333 = $332 & 2;
 $334 = ($333|0)==(0);
 if ($334) {
  return;
 }
 (___pthread_mutex_unlock((452568))|0);
 return;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size()|0;
    // Perform a compare-and-swap loop to update the new dynamic top value. This is because
    // this function can be called simultaneously in multiple threads.
    do {

      oldDynamicTop = Atomics_load(HEAP32, DYNAMICTOP_PTR>>2)|0;
      newDynamicTop = oldDynamicTop + increment | 0;

      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
        abortOnCannotGrowMemory(newDynamicTop|0)|0;
        ___setErrNo(12);
        return -1;
      }

      if ((newDynamicTop|0) > (totalMemory|0)) {
        if (_emscripten_resize_heap(newDynamicTop|0)|0) {
          // We resized the heap. Start another loop iteration if we need to.
          totalMemory = _emscripten_get_heap_size()|0;
          continue;
        } else {
          // We failed to resize the heap.
          // Possibly another thread has grown memory meanwhile, if we race with them. If memory grew,
          // start another loop iteration.
          if ((_emscripten_get_heap_size()|0) > totalMemory) {
            totalMemory = _emscripten_get_heap_size()|0;
            continue;
          }
          ___setErrNo(12);
          return -1;
        }
      }

      // Attempt to update the dynamic top to new value. Another thread may have beat this thread to the update,
      // in which case we will need to start over by iterating the loop body again.
      oldDynamicTopOnChange = Atomics_compareExchange(HEAP32, DYNAMICTOP_PTR>>2, oldDynamicTop|0, newDynamicTop|0)|0;
    } while((oldDynamicTopOnChange|0) != (oldDynamicTop|0));

    return oldDynamicTop|0;
}
function ___pthread_mutex_lock($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = load4($0);
 $2 = $1 & 15;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 4|0);
  $5 = (Atomics_compareExchange(HEAP32, $4>>2,0,16)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $7 = (___pthread_mutex_timedlock($0,0)|0);
 $$0 = $7;
 return ($$0|0);
}
function ___pthread_mutex_unlock($0) {
 $0 = $0|0;
 var $$0 = 0, $$045 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = (Atomics_load(HEAP32,$1>>2)|0);
 $3 = load4($0);
 $4 = $3 & 15;
 $5 = $3 & 128;
 $6 = $5 ^ 128;
 $7 = ($4|0)==(0);
 if ($7) {
  $$pre = ((($0)) + 4|0);
  $$045 = 0;$$pre$phiZ2D = $$pre;
 } else {
  $8 = (_pthread_self()|0);
  $9 = ((($0)) + 4|0);
  $10 = (Atomics_load(HEAP32,$9>>2)|0);
  $11 = $10 & 2147483647;
  $12 = ((($8)) + 52|0);
  $13 = load4($12);
  $14 = ($11|0)==($13|0);
  if (!($14)) {
   $$0 = 1;
   return ($$0|0);
  }
  $15 = $3 & 3;
  $16 = ($15|0)==(1);
  if ($16) {
   $17 = ((($0)) + 20|0);
   $18 = load4($17);
   $19 = ($18|0)==(0);
   if (!($19)) {
    $20 = (($18) + -1)|0;
    store4($17,$20);
    $$0 = 0;
    return ($$0|0);
   }
  }
  $21 = ($6|0)==(0);
  $22 = ((($0)) + 16|0);
  if ($21) {
   $23 = ((($8)) + 176|0);
   Atomics_store(HEAP32,$23>>2,$22)|0;
   ___vm_lock();
  }
  $24 = ((($0)) + 12|0);
  $25 = load4($24);
  $26 = load4($22);
  Atomics_store(HEAP32,$25>>2,$26)|0;
  $27 = ((($8)) + 168|0);
  $28 = ($26|0)==($27|0);
  if ($28) {
   $$045 = $8;$$pre$phiZ2D = $9;
  } else {
   $29 = ((($26)) + -4|0);
   Atomics_store(HEAP32,$29>>2,$25)|0;
   $$045 = $8;$$pre$phiZ2D = $9;
  }
 }
 $30 = $3 & 8;
 $31 = ($30|0)==(0);
 $32 = $31 ? 0 : 2147483647;
 while(1) {
  $33 = (Atomics_load(HEAP32, $$pre$phiZ2D>>2)|0);
  $34 = (Atomics_compareExchange(HEAP32, $$pre$phiZ2D>>2,$33,$32)|0);
  $35 = ($34|0)==($33|0);
  if ($35) {
   break;
  }
 }
 $36 = ($6|0)!=(0);
 $or$cond = $7 | $36;
 if (!($or$cond)) {
  $37 = ((($$045)) + 176|0);
  Atomics_store(HEAP32,$37>>2,0)|0;
  ___vm_unlock();
 }
 $38 = ($2|0)!=(0);
 $39 = ($33|0)<(0);
 $or$cond3 = $38 | $39;
 if (!($or$cond3)) {
  $$0 = 0;
  return ($$0|0);
 }
 (_emscripten_futex_wake(($$pre$phiZ2D|0),1)|0);
 $$0 = 0;
 return ($$0|0);
}
function _pthread_mutexattr_init($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 store4($0,0);
 return 0;
}
function _pthread_mutex_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$sroa$0 = sp;
 ; store8($$sroa$0,i64_const(0,0),4); store8($$sroa$0+8|0,i64_const(0,0),4); store8($$sroa$0+16|0,i64_const(0,0),4); store4($$sroa$0+24|0,0,4);
 ; store8($0,load8($$sroa$0,4),4); store8($0+8 | 0,load8($$sroa$0+8 | 0,4),4); store8($0+16 | 0,load8($$sroa$0+16 | 0,4),4); store4($0+24 | 0,load4($$sroa$0+24 | 0,4),4);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return 0;
 }
 $3 = load4($1);
 store4($0,$3);
 STACKTOP = sp;return 0;
}
// Copyright 2016 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.


// Copyright 2016 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

var Fetch = {
  xhrs: [],

  // The web worker that runs proxied file I/O requests. (this field is populated on demand, start as undefined to save code size)
  // worker: undefined,

  // Specifies an instance to the IndexedDB database. The database is opened
  // as a preload step before the Emscripten application starts. (this field is populated on demand, start as undefined to save code size)
  // dbInstance: undefined,

  setu64: function(addr, val) {
    HEAPU32[addr >> 2] = val;
    HEAPU32[addr + 4 >> 2] = (val / 4294967296)|0;
  },

  openDatabase: function(dbname, dbversion, onsuccess, onerror) {
    try {
      var openRequest = indexedDB.open(dbname, dbversion);
    } catch (e) { return onerror(e); }

    openRequest.onupgradeneeded = function(event) {
      var db = event.target.result;
      if (db.objectStoreNames.contains('FILES')) {
        db.deleteObjectStore('FILES');
      }
      db.createObjectStore('FILES');
    };
    openRequest.onsuccess = function(event) { onsuccess(event.target.result); };
    openRequest.onerror = function(error) { onerror(error); };
  },

  initFetchWorker: function() {
    var stackSize = 128*1024;
    var stack = allocate(stackSize>>2, "i32*", ALLOC_DYNAMIC);
    Fetch.worker.postMessage({cmd: 'init', DYNAMICTOP_PTR: DYNAMICTOP_PTR, STACKTOP: stack, STACK_MAX: stack + stackSize, queuePtr: _fetch_work_queue, buffer: HEAPU8.buffer});
  },

  staticInit: function() {
    var isMainThread = (typeof ENVIRONMENT_IS_FETCH_WORKER === 'undefined' && !ENVIRONMENT_IS_PTHREAD);

    var onsuccess = function(db) {
      Fetch.dbInstance = db;

      if (isMainThread) {
        Fetch.initFetchWorker();
        removeRunDependency('library_fetch_init');
      }
    };
    var onerror = function() {
      Fetch.dbInstance = false;

      if (isMainThread) {
        Fetch.initFetchWorker();
        removeRunDependency('library_fetch_init');
      }
    };
    Fetch.openDatabase('emscripten_filesystem', 1, onsuccess, onerror);

    if (isMainThread) {
      addRunDependency('library_fetch_init');

      // Allow HTML module to configure the location where the 'worker.js' file will be loaded from,
      // via Module.locateFile() function. If not specified, then the default URL 'worker.js' relative
      // to the main html file is loaded.
      var fetchJs = locateFile('WASM.fetch.js');
      Fetch.worker = new Worker(fetchJs);
      Fetch.worker.onmessage = function(e) {
        out('fetch-worker sent a message: ' + e.filename + ':' + e.lineno + ': ' + e.message);
      };
      Fetch.worker.onerror = function(e) {
        err('fetch-worker sent an error! ' + e.filename + ':' + e.lineno + ': ' + e.message);
      };
    }
  }
}

function __emscripten_fetch_delete_cached_data(db, fetch, onsuccess, onerror) {
  if (!db) {
    onerror(fetch, 0, 'IndexedDB not available!');
    return;
  }

  var fetch_attr = fetch + 112;
  var path = HEAPU32[fetch_attr + 60 >> 2];
  if (!path) path = HEAPU32[fetch + 8 >> 2];
  var pathStr = UTF8ToString(path);

  try {
    var transaction = db.transaction(['FILES'], 'readwrite');
    var packages = transaction.objectStore('FILES');
    var request = packages.delete(pathStr);
    request.onsuccess = function(event) {
      var value = event.target.result;
      HEAPU32[fetch + 12 >> 2] = 0;
      Fetch.setu64(fetch + 16, 0);
      Fetch.setu64(fetch + 24, 0);
      Fetch.setu64(fetch + 32, 0);
      HEAPU16[fetch + 40 >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
      HEAPU16[fetch + 42 >> 1] = 200; // Mimic XHR HTTP status code 200 "OK"
      stringToUTF8("OK", fetch + 44, 64);
      onsuccess(fetch, 0, value);
    };
    request.onerror = function(error) {
      HEAPU16[fetch + 40 >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
      HEAPU16[fetch + 42 >> 1] = 404; // Mimic XHR HTTP status code 404 "Not Found"
      stringToUTF8("Not Found", fetch + 44, 64);
      onerror(fetch, 0, error);
    };
  } catch(e) {
    onerror(fetch, 0, e);
  }
}

function __emscripten_fetch_load_cached_data(db, fetch, onsuccess, onerror) {
  if (!db) {
    onerror(fetch, 0, 'IndexedDB not available!');
    return;
  }

  var fetch_attr = fetch + 112;
  var path = HEAPU32[fetch_attr + 60 >> 2];
  if (!path) path = HEAPU32[fetch + 8 >> 2];
  var pathStr = UTF8ToString(path);

  try {
    var transaction = db.transaction(['FILES'], 'readonly');
    var packages = transaction.objectStore('FILES');
    var getRequest = packages.get(pathStr);
    getRequest.onsuccess = function(event) {
      if (event.target.result) {
        var value = event.target.result;
        var len = value.byteLength || value.length;
        // The data pointer malloc()ed here has the same lifetime as the emscripten_fetch_t structure itself has, and is
        // freed when emscripten_fetch_close() is called.
        var ptr = _malloc(len);
        HEAPU8.set(new Uint8Array(value), ptr);
        HEAPU32[fetch + 12 >> 2] = ptr;
        Fetch.setu64(fetch + 16, len);
        Fetch.setu64(fetch + 24, 0);
        Fetch.setu64(fetch + 32, len);
        HEAPU16[fetch + 40 >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
        HEAPU16[fetch + 42 >> 1] = 200; // Mimic XHR HTTP status code 200 "OK"
        stringToUTF8("OK", fetch + 44, 64);
        onsuccess(fetch, 0, value);
      } else {
        // Succeeded to load, but the load came back with the value of undefined, treat that as an error since we never store undefined in db.
        HEAPU16[fetch + 40 >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
        HEAPU16[fetch + 42 >> 1] = 404; // Mimic XHR HTTP status code 404 "Not Found"
        stringToUTF8("Not Found", fetch + 44, 64);
        onerror(fetch, 0, 'no data');
      }
    };
    getRequest.onerror = function(error) {
      HEAPU16[fetch + 40 >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
      HEAPU16[fetch + 42 >> 1] = 404; // Mimic XHR HTTP status code 404 "Not Found"
      stringToUTF8("Not Found", fetch + 44, 64);
      onerror(fetch, 0, error);
    };
  } catch(e) {
    onerror(fetch, 0, e);
  }
}

function __emscripten_fetch_cache_data(db, fetch, data, onsuccess, onerror) {
  if (!db) {
    onerror(fetch, 0, 'IndexedDB not available!');
    return;
  }

  var fetch_attr = fetch + 112;
  var destinationPath = HEAPU32[fetch_attr + 60 >> 2];
  if (!destinationPath) destinationPath = HEAPU32[fetch + 8 >> 2];
  var destinationPathStr = UTF8ToString(destinationPath);

  try {
    var transaction = db.transaction(['FILES'], 'readwrite');
    var packages = transaction.objectStore('FILES');
    var putRequest = packages.put(data, destinationPathStr);
    putRequest.onsuccess = function(event) {
      HEAPU16[fetch + 40 >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
      HEAPU16[fetch + 42 >> 1] = 200; // Mimic XHR HTTP status code 200 "OK"
      stringToUTF8("OK", fetch + 44, 64);
      onsuccess(fetch, 0, destinationPathStr);
    };
    putRequest.onerror = function(error) {
      // Most likely we got an error if IndexedDB is unwilling to store any more data for this page.
      // TODO: Can we identify and break down different IndexedDB-provided errors and convert those
      // to more HTTP status codes for more information?
      HEAPU16[fetch + 40 >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
      HEAPU16[fetch + 42 >> 1] = 413; // Mimic XHR HTTP status code 413 "Payload Too Large"
      stringToUTF8("Payload Too Large", fetch + 44, 64);
      onerror(fetch, 0, error);
    };
  } catch(e) {
    onerror(fetch, 0, e);
  }
}

function __emscripten_fetch_xhr(fetch, onsuccess, onerror, onprogress) {
  var url = HEAPU32[fetch + 8 >> 2];
  if (!url) {
    onerror(fetch, 0, 'no url specified!');
    return;
  }
  var url_ = UTF8ToString(url);

  var fetch_attr = fetch + 112;
  var requestMethod = UTF8ToString(fetch_attr);
  if (!requestMethod) requestMethod = 'GET';
  var userData = HEAPU32[fetch_attr + 32 >> 2];
  var fetchAttributes = HEAPU32[fetch_attr + 48 >> 2];
  var timeoutMsecs = HEAPU32[fetch_attr + 52 >> 2];
  var withCredentials = !!HEAPU32[fetch_attr + 56 >> 2];
  var destinationPath = HEAPU32[fetch_attr + 60 >> 2];
  var userName = HEAPU32[fetch_attr + 64 >> 2];
  var password = HEAPU32[fetch_attr + 68 >> 2];
  var requestHeaders = HEAPU32[fetch_attr + 72 >> 2];
  var overriddenMimeType = HEAPU32[fetch_attr + 76 >> 2];
  var dataPtr = HEAPU32[fetch_attr + 80 >> 2];
  var dataLength = HEAPU32[fetch_attr + 84 >> 2];

  var fetchAttrLoadToMemory = !!(fetchAttributes & 1);
  var fetchAttrStreamData = !!(fetchAttributes & 2);
  var fetchAttrPersistFile = !!(fetchAttributes & 4);
  var fetchAttrAppend = !!(fetchAttributes & 8);
  var fetchAttrReplace = !!(fetchAttributes & 16);
  var fetchAttrSynchronous = !!(fetchAttributes & 64);
  var fetchAttrWaitable = !!(fetchAttributes & 128);

  var userNameStr = userName ? UTF8ToString(userName) : undefined;
  var passwordStr = password ? UTF8ToString(password) : undefined;
  var overriddenMimeTypeStr = overriddenMimeType ? UTF8ToString(overriddenMimeType) : undefined;

  var xhr = new XMLHttpRequest();
  xhr.withCredentials = withCredentials;
  xhr.open(requestMethod, url_, !fetchAttrSynchronous, userNameStr, passwordStr);
  if (!fetchAttrSynchronous) xhr.timeout = timeoutMsecs; // XHR timeout field is only accessible in async XHRs, and must be set after .open() but before .send().
  xhr.url_ = url_; // Save the url for debugging purposes (and for comparing to the responseURL that server side advertised)
  xhr.responseType = fetchAttrStreamData ? 'moz-chunked-arraybuffer' : 'arraybuffer';

  if (overriddenMimeType) {
    xhr.overrideMimeType(overriddenMimeTypeStr);
  }
  if (requestHeaders) {
    for(;;) {
      var key = HEAPU32[requestHeaders >> 2];
      if (!key) break;
      var value = HEAPU32[requestHeaders + 4 >> 2];
      if (!value) break;
      requestHeaders += 8;
      var keyStr = UTF8ToString(key);
      var valueStr = UTF8ToString(value);
      xhr.setRequestHeader(keyStr, valueStr);
    }
  }
  Fetch.xhrs.push(xhr);
  var id = Fetch.xhrs.length;
  HEAPU32[fetch + 0 >> 2] = id;
  var data = (dataPtr && dataLength) ? HEAPU8.slice(dataPtr, dataPtr + dataLength) : null;
  // TODO: Support specifying custom headers to the request.

  xhr.onload = function(e) {
    var len = xhr.response ? xhr.response.byteLength : 0;
    var ptr = 0;
    var ptrLen = 0;
    if (fetchAttrLoadToMemory && !fetchAttrStreamData) {
      ptrLen = len;
      // The data pointer malloc()ed here has the same lifetime as the emscripten_fetch_t structure itself has, and is
      // freed when emscripten_fetch_close() is called.
      ptr = _malloc(ptrLen);
      HEAPU8.set(new Uint8Array(xhr.response), ptr);
    }
    HEAPU32[fetch + 12 >> 2] = ptr;
    Fetch.setu64(fetch + 16, ptrLen);
    Fetch.setu64(fetch + 24, 0);
    if (len) {
      // If the final XHR.onload handler receives the bytedata to compute total length, report that,
      // otherwise don't write anything out here, which will retain the latest byte size reported in
      // the most recent XHR.onprogress handler.
      Fetch.setu64(fetch + 32, len);
    }
    HEAPU16[fetch + 40 >> 1] = xhr.readyState;
    if (xhr.readyState === 4 && xhr.status === 0) {
      if (len > 0) xhr.status = 200; // If loading files from a source that does not give HTTP status code, assume success if we got data bytes.
      else xhr.status = 404; // Conversely, no data bytes is 404.
    }
    HEAPU16[fetch + 42 >> 1] = xhr.status;
    if (xhr.statusText) stringToUTF8(xhr.statusText, fetch + 44, 64);
    if (xhr.status >= 200 && xhr.status < 300) {
      if (onsuccess) onsuccess(fetch, xhr, e);
    } else {
      if (onerror) onerror(fetch, xhr, e);
    }
  }
  xhr.onerror = function(e) {
    var status = xhr.status; // XXX TODO: Overwriting xhr.status doesn't work here, so don't override anywhere else either.
    if (xhr.readyState == 4 && status == 0) status = 404; // If no error recorded, pretend it was 404 Not Found.
    HEAPU32[fetch + 12 >> 2] = 0;
    Fetch.setu64(fetch + 16, 0);
    Fetch.setu64(fetch + 24, 0);
    Fetch.setu64(fetch + 32, 0);
    HEAPU16[fetch + 40 >> 1] = xhr.readyState;
    HEAPU16[fetch + 42 >> 1] = status;
    if (onerror) onerror(fetch, xhr, e);
  }
  xhr.ontimeout = function(e) {
    if (onerror) onerror(fetch, xhr, e);
  }
  xhr.onprogress = function(e) {
    var ptrLen = (fetchAttrLoadToMemory && fetchAttrStreamData && xhr.response) ? xhr.response.byteLength : 0;
    var ptr = 0;
    if (fetchAttrLoadToMemory && fetchAttrStreamData) {
      // The data pointer malloc()ed here has the same lifetime as the emscripten_fetch_t structure itself has, and is
      // freed when emscripten_fetch_close() is called.
      ptr = _malloc(ptrLen);
      HEAPU8.set(new Uint8Array(xhr.response), ptr);
    }
    HEAPU32[fetch + 12 >> 2] = ptr;
    Fetch.setu64(fetch + 16, ptrLen);
    Fetch.setu64(fetch + 24, e.loaded - ptrLen);
    Fetch.setu64(fetch + 32, e.total);
    HEAPU16[fetch + 40 >> 1] = xhr.readyState;
    if (xhr.readyState >= 3 && xhr.status === 0 && e.loaded > 0) xhr.status = 200; // If loading files from a source that does not give HTTP status code, assume success if we get data bytes
    HEAPU16[fetch + 42 >> 1] = xhr.status;
    if (xhr.statusText) stringToUTF8(xhr.statusText, fetch + 44, 64);
    if (onprogress) onprogress(fetch, xhr, e);
  }
  try {
    xhr.send(data);
  } catch(e) {
    if (onerror) onerror(fetch, xhr, e);
  }
}

function emscripten_start_fetch(fetch, successcb, errorcb, progresscb) {
  if (typeof Module !== 'undefined') Module['noExitRuntime'] = true; // If we are the main Emscripten runtime, we should not be closing down.

  var fetch_attr = fetch + 112;
  var requestMethod = UTF8ToString(fetch_attr);
  var onsuccess = HEAPU32[fetch_attr + 36 >> 2];
  var onerror = HEAPU32[fetch_attr + 40 >> 2];
  var onprogress = HEAPU32[fetch_attr + 44 >> 2];
  var fetchAttributes = HEAPU32[fetch_attr + 48 >> 2];
  var fetchAttrLoadToMemory = !!(fetchAttributes & 1);
  var fetchAttrStreamData = !!(fetchAttributes & 2);
  var fetchAttrPersistFile = !!(fetchAttributes & 4);
  var fetchAttrNoDownload = !!(fetchAttributes & 32);
  var fetchAttrAppend = !!(fetchAttributes & 8);
  var fetchAttrReplace = !!(fetchAttributes & 16);

  var reportSuccess = function(fetch, xhr, e) {
    if (onsuccess) dynCall_vi(onsuccess, fetch);
    else if (successcb) successcb(fetch);
  };

  var reportProgress = function(fetch, xhr, e) {
    if (onprogress) dynCall_vi(onprogress, fetch);
    else if (progresscb) progresscb(fetch);
  };

  var reportError = function(fetch, xhr, e) {
    if (onerror) dynCall_vi(onerror, fetch);
    else if (errorcb) errorcb(fetch);
  };

  var performUncachedXhr = function(fetch, xhr, e) {
    __emscripten_fetch_xhr(fetch, reportSuccess, reportError, reportProgress);
  };

  var cacheResultAndReportSuccess = function(fetch, xhr, e) {
    var storeSuccess = function(fetch, xhr, e) {
      if (onsuccess) dynCall_vi(onsuccess, fetch);
      else if (successcb) successcb(fetch);
    };
    var storeError = function(fetch, xhr, e) {
      if (onsuccess) dynCall_vi(onsuccess, fetch);
      else if (successcb) successcb(fetch);
    };
    __emscripten_fetch_cache_data(Fetch.dbInstance, fetch, xhr.response, storeSuccess, storeError);
  };

  var performCachedXhr = function(fetch, xhr, e) {
    __emscripten_fetch_xhr(fetch, cacheResultAndReportSuccess, reportError, reportProgress);
  };

  // Should we try IndexedDB first?
  var needsIndexedDbConnection = !fetchAttrReplace || requestMethod === 'EM_IDB_STORE' || requestMethod === 'EM_IDB_DELETE';
  if (needsIndexedDbConnection && !Fetch.dbInstance) {
    reportError(fetch, 0, 'IndexedDB is not open');
    return 0; // todo: free
  }

  if (requestMethod === 'EM_IDB_STORE') {
    // TODO(?): Here we perform a clone of the data, because storing shared typed arrays to IndexedDB does not seem to be allowed.
    var ptr = HEAPU32[fetch_attr + 80 >> 2];
    __emscripten_fetch_cache_data(Fetch.dbInstance, fetch, HEAPU8.slice(ptr, ptr + HEAPU32[fetch_attr + 84 >> 2]), reportSuccess, reportError);
  } else if (requestMethod === 'EM_IDB_DELETE') {
    __emscripten_fetch_delete_cached_data(Fetch.dbInstance, fetch, reportSuccess, reportError);
  } else if (!fetchAttrReplace) {
    __emscripten_fetch_load_cached_data(Fetch.dbInstance, fetch, reportSuccess, fetchAttrNoDownload ? reportError : (fetchAttrPersistFile ? performCachedXhr : performUncachedXhr));
  } else if (!fetchAttrNoDownload) {
    __emscripten_fetch_xhr(fetch, fetchAttrPersistFile ? cacheResultAndReportSuccess : reportSuccess, reportError, reportProgress);
  } else {
    return 0; // todo: free
  }
  return fetch;
}



if (typeof Atomics === 'undefined') {
  // Polyfill singlethreaded atomics ops from http://lars-t-hansen.github.io/ecmascript_sharedmem/shmem.html#Atomics.add
  // No thread-safety needed since we don't have multithreading support.
  Atomics = {};
  Atomics['add'] = function(t, i, v) { var w = t[i]; t[i] += v; return w; }
  Atomics['and'] = function(t, i, v) { var w = t[i]; t[i] &= v; return w; }
  Atomics['compareExchange'] = function(t, i, e, r) { var w = t[i]; if (w == e) t[i] = r; return w; }
  Atomics['exchange'] = function(t, i, v) { var w = t[i]; t[i] = v; return w; }
  Atomics['wait'] = function(t, i, v, o) { if (t[i] != v) return 'not-equal'; else return 'timed-out'; }
  Atomics['notify'] = function(t, i, c) { return 0; }
  Atomics['wakeOrRequeue'] = function(t, i1, c, i2, v) { return 0; }
  Atomics['isLockFree'] = function(s) { return true; }
  Atomics['load'] = function(t, i) { return t[i]; }
  Atomics['or'] = function(t, i, v) { var w = t[i]; t[i] |= v; return w; }
  Atomics['store'] = function(t, i, v) { t[i] = v; return v; }
  Atomics['sub'] = function(t, i, v) { var w = t[i]; t[i] -= v; return w; }
  Atomics['xor'] = function(t, i, v) { var w = t[i]; t[i] ^= v; return w; }
}

var Atomics_add = Atomics.add;
var Atomics_and = Atomics.and;
var Atomics_compareExchange = Atomics.compareExchange;
var Atomics_exchange = Atomics.exchange;
var Atomics_wait = Atomics.wait;
var Atomics_wake = Atomics.wake;
var Atomics_wakeOrRequeue = Atomics.wakeOrRequeue;
var Atomics_isLockFree = Atomics.isLockFree;
var Atomics_load = Atomics.load;
var Atomics_or = Atomics.or;
var Atomics_store = Atomics.store;
var Atomics_sub = Atomics.sub;
var Atomics_xor = Atomics.xor;

function load1(ptr) { return HEAP8[ptr>>2]; }
function store1(ptr, value) { HEAP8[ptr>>2] = value; }
function load2(ptr) { return HEAP16[ptr>>2]; }
function store2(ptr, value) { HEAP16[ptr>>2] = value; }
function load4(ptr) { return HEAP32[ptr>>2]; }
function store4(ptr, value) { HEAP32[ptr>>2] = value; }

var ENVIRONMENT_IS_FETCH_WORKER = true;
var ENVIRONMENT_IS_WORKER = true;
var ENVIRONMENT_IS_PTHREAD = true;
var __pthread_is_main_runtime_thread=0;
var DYNAMICTOP_PTR = 0;
var nan = NaN;
var inf = Infinity;

function _emscripten_asm_const_v() {}

function assert(condition) {
  if (!condition) console.error('assert failure!');
}

Fetch.staticInit();

var queuePtr = 0;
var buffer = null;
var STACKTOP = 0;
var STACK_MAX = 0;
var HEAP8 = null;
var HEAPU8 = null;
var HEAP16 = null;
var HEAPU16 = null;
var HEAP32 = null;
var HEAPU32 = null;

function processWorkQueue() {
  if (!queuePtr) return;
  var numQueuedItems = Atomics_load(HEAPU32, queuePtr + 4 >> 2);
  if (numQueuedItems == 0) return;

  var queuedOperations = Atomics_load(HEAPU32, queuePtr >> 2);
  var queueSize = Atomics_load(HEAPU32, queuePtr + 8 >> 2);
  for(var i = 0; i < numQueuedItems; ++i) {
    var fetch = Atomics_load(HEAPU32, (queuedOperations >> 2)+i);
    function successcb(fetch) {
      Atomics.compareExchange(HEAPU32, fetch + 108 >> 2, 1, 2);
      Atomics.wake(HEAP32, fetch + 108 >> 2, 1);
    }
    function errorcb(fetch) {
      Atomics.compareExchange(HEAPU32, fetch + 108 >> 2, 1, 2);
      Atomics.wake(HEAP32, fetch + 108 >> 2, 1);
    }
    function progresscb(fetch) {
    }
    try {
      emscripten_start_fetch(fetch, successcb, errorcb, progresscb);
    } catch(e) {
      console.error(e);
    }
    /*
    if (interval != undefined) {
      clearInterval(interval);
      interval = undefined;
    }
    */
  }
  Atomics_store(HEAPU32, queuePtr + 4 >> 2, 0);
}

interval = 0;
this.onmessage = function(e) {
  if (e.data.cmd == 'init') {
    queuePtr = e.data.queuePtr;
    buffer = e.data.buffer;
    STACKTOP = e.data.STACKTOP;
    STACK_MAX = e.data.STACK_MAX;
    DYNAMICTOP_PTR = e.data.DYNAMICTOP_PTR;
    HEAP8 = new Int8Array(buffer);
    HEAPU8 = new Uint8Array(buffer);
    HEAP16 = new Int16Array(buffer);
    HEAPU16 = new Uint16Array(buffer);
    HEAP32 = new Int32Array(buffer);
    HEAPU32 = new Uint32Array(buffer);
    interval = setInterval(processWorkQueue, 100);
  }
}


