// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageTest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageTest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageTest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageTest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageTest_2eproto;
namespace MessageTest {
class MyMessage;
struct MyMessageDefaultTypeInternal;
extern MyMessageDefaultTypeInternal _MyMessage_default_instance_;
class sNetworkData_eMI_C2S_LOGIN_REQUEST;
struct sNetworkData_eMI_C2S_LOGIN_REQUESTDefaultTypeInternal;
extern sNetworkData_eMI_C2S_LOGIN_REQUESTDefaultTypeInternal _sNetworkData_eMI_C2S_LOGIN_REQUEST_default_instance_;
class sNetworkData_eMI_S2C_LOGIN_RESULT;
struct sNetworkData_eMI_S2C_LOGIN_RESULTDefaultTypeInternal;
extern sNetworkData_eMI_S2C_LOGIN_RESULTDefaultTypeInternal _sNetworkData_eMI_S2C_LOGIN_RESULT_default_instance_;
}  // namespace MessageTest
PROTOBUF_NAMESPACE_OPEN
template<> ::MessageTest::MyMessage* Arena::CreateMaybeMessage<::MessageTest::MyMessage>(Arena*);
template<> ::MessageTest::sNetworkData_eMI_C2S_LOGIN_REQUEST* Arena::CreateMaybeMessage<::MessageTest::sNetworkData_eMI_C2S_LOGIN_REQUEST>(Arena*);
template<> ::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT* Arena::CreateMaybeMessage<::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MessageTest {

enum eMessageID : int {
  eMI_C2S_LOGIN_REQUEST = 0,
  eMI_S2C_LOGIN_RESULT = 1,
  eMI_MAX = 3,
  eMessageID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  eMessageID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool eMessageID_IsValid(int value);
constexpr eMessageID eMessageID_MIN = eMI_C2S_LOGIN_REQUEST;
constexpr eMessageID eMessageID_MAX = eMI_MAX;
constexpr int eMessageID_ARRAYSIZE = eMessageID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eMessageID_descriptor();
template<typename T>
inline const std::string& eMessageID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eMessageID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eMessageID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eMessageID_descriptor(), enum_t_value);
}
inline bool eMessageID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eMessageID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eMessageID>(
    eMessageID_descriptor(), name, value);
}
// ===================================================================

class MyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:MessageTest.MyMessage) */ {
 public:
  inline MyMessage() : MyMessage(nullptr) {}
  explicit constexpr MyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyMessage(const MyMessage& from);
  MyMessage(MyMessage&& from) noexcept
    : MyMessage() {
    *this = ::std::move(from);
  }

  inline MyMessage& operator=(const MyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyMessage& operator=(MyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MyMessage* internal_default_instance() {
    return reinterpret_cast<const MyMessage*>(
               &_MyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MyMessage& a, MyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageTest.MyMessage";
  }
  protected:
  explicit MyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MessageTest.MyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageTest_2eproto;
};
// -------------------------------------------------------------------

class sNetworkData_eMI_C2S_LOGIN_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST) */ {
 public:
  inline sNetworkData_eMI_C2S_LOGIN_REQUEST() : sNetworkData_eMI_C2S_LOGIN_REQUEST(nullptr) {}
  ~sNetworkData_eMI_C2S_LOGIN_REQUEST() override;
  explicit constexpr sNetworkData_eMI_C2S_LOGIN_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sNetworkData_eMI_C2S_LOGIN_REQUEST(const sNetworkData_eMI_C2S_LOGIN_REQUEST& from);
  sNetworkData_eMI_C2S_LOGIN_REQUEST(sNetworkData_eMI_C2S_LOGIN_REQUEST&& from) noexcept
    : sNetworkData_eMI_C2S_LOGIN_REQUEST() {
    *this = ::std::move(from);
  }

  inline sNetworkData_eMI_C2S_LOGIN_REQUEST& operator=(const sNetworkData_eMI_C2S_LOGIN_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline sNetworkData_eMI_C2S_LOGIN_REQUEST& operator=(sNetworkData_eMI_C2S_LOGIN_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sNetworkData_eMI_C2S_LOGIN_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const sNetworkData_eMI_C2S_LOGIN_REQUEST* internal_default_instance() {
    return reinterpret_cast<const sNetworkData_eMI_C2S_LOGIN_REQUEST*>(
               &_sNetworkData_eMI_C2S_LOGIN_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(sNetworkData_eMI_C2S_LOGIN_REQUEST& a, sNetworkData_eMI_C2S_LOGIN_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(sNetworkData_eMI_C2S_LOGIN_REQUEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sNetworkData_eMI_C2S_LOGIN_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  sNetworkData_eMI_C2S_LOGIN_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<sNetworkData_eMI_C2S_LOGIN_REQUEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sNetworkData_eMI_C2S_LOGIN_REQUEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const sNetworkData_eMI_C2S_LOGIN_REQUEST& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sNetworkData_eMI_C2S_LOGIN_REQUEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST";
  }
  protected:
  explicit sNetworkData_eMI_C2S_LOGIN_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrGameIDFieldNumber = 1,
    kStrAuthFieldNumber = 2,
  };
  // string strGameID = 1;
  void clear_strgameid();
  const std::string& strgameid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strgameid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strgameid();
  PROTOBUF_NODISCARD std::string* release_strgameid();
  void set_allocated_strgameid(std::string* strgameid);
  private:
  const std::string& _internal_strgameid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strgameid(const std::string& value);
  std::string* _internal_mutable_strgameid();
  public:

  // string strAuth = 2;
  void clear_strauth();
  const std::string& strauth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strauth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strauth();
  PROTOBUF_NODISCARD std::string* release_strauth();
  void set_allocated_strauth(std::string* strauth);
  private:
  const std::string& _internal_strauth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strauth(const std::string& value);
  std::string* _internal_mutable_strauth();
  public:

  // @@protoc_insertion_point(class_scope:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strgameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strauth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageTest_2eproto;
};
// -------------------------------------------------------------------

class sNetworkData_eMI_S2C_LOGIN_RESULT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT) */ {
 public:
  inline sNetworkData_eMI_S2C_LOGIN_RESULT() : sNetworkData_eMI_S2C_LOGIN_RESULT(nullptr) {}
  ~sNetworkData_eMI_S2C_LOGIN_RESULT() override;
  explicit constexpr sNetworkData_eMI_S2C_LOGIN_RESULT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sNetworkData_eMI_S2C_LOGIN_RESULT(const sNetworkData_eMI_S2C_LOGIN_RESULT& from);
  sNetworkData_eMI_S2C_LOGIN_RESULT(sNetworkData_eMI_S2C_LOGIN_RESULT&& from) noexcept
    : sNetworkData_eMI_S2C_LOGIN_RESULT() {
    *this = ::std::move(from);
  }

  inline sNetworkData_eMI_S2C_LOGIN_RESULT& operator=(const sNetworkData_eMI_S2C_LOGIN_RESULT& from) {
    CopyFrom(from);
    return *this;
  }
  inline sNetworkData_eMI_S2C_LOGIN_RESULT& operator=(sNetworkData_eMI_S2C_LOGIN_RESULT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sNetworkData_eMI_S2C_LOGIN_RESULT& default_instance() {
    return *internal_default_instance();
  }
  static inline const sNetworkData_eMI_S2C_LOGIN_RESULT* internal_default_instance() {
    return reinterpret_cast<const sNetworkData_eMI_S2C_LOGIN_RESULT*>(
               &_sNetworkData_eMI_S2C_LOGIN_RESULT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(sNetworkData_eMI_S2C_LOGIN_RESULT& a, sNetworkData_eMI_S2C_LOGIN_RESULT& b) {
    a.Swap(&b);
  }
  inline void Swap(sNetworkData_eMI_S2C_LOGIN_RESULT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sNetworkData_eMI_S2C_LOGIN_RESULT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  sNetworkData_eMI_S2C_LOGIN_RESULT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<sNetworkData_eMI_S2C_LOGIN_RESULT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sNetworkData_eMI_S2C_LOGIN_RESULT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const sNetworkData_eMI_S2C_LOGIN_RESULT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sNetworkData_eMI_S2C_LOGIN_RESULT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT";
  }
  protected:
  explicit sNetworkData_eMI_S2C_LOGIN_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kI64BetListFieldNumber = 6,
    kStrErrorCodeFieldNumber = 1,
    kStrVersionFieldNumber = 2,
    kStrCurrencyFieldNumber = 3,
    kStrNoteFieldNumber = 5,
    kI64MoneyFieldNumber = 4,
  };
  // repeated int64 i64BetList = 6;
  int i64betlist_size() const;
  private:
  int _internal_i64betlist_size() const;
  public:
  void clear_i64betlist();
  private:
  int64_t _internal_i64betlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_i64betlist() const;
  void _internal_add_i64betlist(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_i64betlist();
  public:
  int64_t i64betlist(int index) const;
  void set_i64betlist(int index, int64_t value);
  void add_i64betlist(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      i64betlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_i64betlist();

  // string strErrorCode = 1;
  void clear_strerrorcode();
  const std::string& strerrorcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strerrorcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strerrorcode();
  PROTOBUF_NODISCARD std::string* release_strerrorcode();
  void set_allocated_strerrorcode(std::string* strerrorcode);
  private:
  const std::string& _internal_strerrorcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strerrorcode(const std::string& value);
  std::string* _internal_mutable_strerrorcode();
  public:

  // string strVersion = 2;
  void clear_strversion();
  const std::string& strversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strversion();
  PROTOBUF_NODISCARD std::string* release_strversion();
  void set_allocated_strversion(std::string* strversion);
  private:
  const std::string& _internal_strversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strversion(const std::string& value);
  std::string* _internal_mutable_strversion();
  public:

  // string strCurrency = 3;
  void clear_strcurrency();
  const std::string& strcurrency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strcurrency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strcurrency();
  PROTOBUF_NODISCARD std::string* release_strcurrency();
  void set_allocated_strcurrency(std::string* strcurrency);
  private:
  const std::string& _internal_strcurrency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strcurrency(const std::string& value);
  std::string* _internal_mutable_strcurrency();
  public:

  // string strNote = 5;
  void clear_strnote();
  const std::string& strnote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strnote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strnote();
  PROTOBUF_NODISCARD std::string* release_strnote();
  void set_allocated_strnote(std::string* strnote);
  private:
  const std::string& _internal_strnote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strnote(const std::string& value);
  std::string* _internal_mutable_strnote();
  public:

  // int64 i64Money = 4;
  void clear_i64money();
  int64_t i64money() const;
  void set_i64money(int64_t value);
  private:
  int64_t _internal_i64money() const;
  void _internal_set_i64money(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > i64betlist_;
  mutable std::atomic<int> _i64betlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strerrorcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strcurrency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strnote_;
  int64_t i64money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageTest_2eproto;
};
// ===================================================================

static const int kMyOptionFieldNumber = 51234;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  my_option;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MyMessage

// -------------------------------------------------------------------

// sNetworkData_eMI_C2S_LOGIN_REQUEST

// string strGameID = 1;
inline void sNetworkData_eMI_C2S_LOGIN_REQUEST::clear_strgameid() {
  strgameid_.ClearToEmpty();
}
inline const std::string& sNetworkData_eMI_C2S_LOGIN_REQUEST::strgameid() const {
  // @@protoc_insertion_point(field_get:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strGameID)
  return _internal_strgameid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sNetworkData_eMI_C2S_LOGIN_REQUEST::set_strgameid(ArgT0&& arg0, ArgT... args) {
 
 strgameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strGameID)
}
inline std::string* sNetworkData_eMI_C2S_LOGIN_REQUEST::mutable_strgameid() {
  std::string* _s = _internal_mutable_strgameid();
  // @@protoc_insertion_point(field_mutable:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strGameID)
  return _s;
}
inline const std::string& sNetworkData_eMI_C2S_LOGIN_REQUEST::_internal_strgameid() const {
  return strgameid_.Get();
}
inline void sNetworkData_eMI_C2S_LOGIN_REQUEST::_internal_set_strgameid(const std::string& value) {
  
  strgameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_C2S_LOGIN_REQUEST::_internal_mutable_strgameid() {
  
  return strgameid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_C2S_LOGIN_REQUEST::release_strgameid() {
  // @@protoc_insertion_point(field_release:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strGameID)
  return strgameid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sNetworkData_eMI_C2S_LOGIN_REQUEST::set_allocated_strgameid(std::string* strgameid) {
  if (strgameid != nullptr) {
    
  } else {
    
  }
  strgameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strgameid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strgameid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strgameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strGameID)
}

// string strAuth = 2;
inline void sNetworkData_eMI_C2S_LOGIN_REQUEST::clear_strauth() {
  strauth_.ClearToEmpty();
}
inline const std::string& sNetworkData_eMI_C2S_LOGIN_REQUEST::strauth() const {
  // @@protoc_insertion_point(field_get:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strAuth)
  return _internal_strauth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sNetworkData_eMI_C2S_LOGIN_REQUEST::set_strauth(ArgT0&& arg0, ArgT... args) {
 
 strauth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strAuth)
}
inline std::string* sNetworkData_eMI_C2S_LOGIN_REQUEST::mutable_strauth() {
  std::string* _s = _internal_mutable_strauth();
  // @@protoc_insertion_point(field_mutable:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strAuth)
  return _s;
}
inline const std::string& sNetworkData_eMI_C2S_LOGIN_REQUEST::_internal_strauth() const {
  return strauth_.Get();
}
inline void sNetworkData_eMI_C2S_LOGIN_REQUEST::_internal_set_strauth(const std::string& value) {
  
  strauth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_C2S_LOGIN_REQUEST::_internal_mutable_strauth() {
  
  return strauth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_C2S_LOGIN_REQUEST::release_strauth() {
  // @@protoc_insertion_point(field_release:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strAuth)
  return strauth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sNetworkData_eMI_C2S_LOGIN_REQUEST::set_allocated_strauth(std::string* strauth) {
  if (strauth != nullptr) {
    
  } else {
    
  }
  strauth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strauth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strauth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strauth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strAuth)
}

// -------------------------------------------------------------------

// sNetworkData_eMI_S2C_LOGIN_RESULT

// string strErrorCode = 1;
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::clear_strerrorcode() {
  strerrorcode_.ClearToEmpty();
}
inline const std::string& sNetworkData_eMI_S2C_LOGIN_RESULT::strerrorcode() const {
  // @@protoc_insertion_point(field_get:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strErrorCode)
  return _internal_strerrorcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sNetworkData_eMI_S2C_LOGIN_RESULT::set_strerrorcode(ArgT0&& arg0, ArgT... args) {
 
 strerrorcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strErrorCode)
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::mutable_strerrorcode() {
  std::string* _s = _internal_mutable_strerrorcode();
  // @@protoc_insertion_point(field_mutable:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strErrorCode)
  return _s;
}
inline const std::string& sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_strerrorcode() const {
  return strerrorcode_.Get();
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_set_strerrorcode(const std::string& value) {
  
  strerrorcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_mutable_strerrorcode() {
  
  return strerrorcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::release_strerrorcode() {
  // @@protoc_insertion_point(field_release:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strErrorCode)
  return strerrorcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::set_allocated_strerrorcode(std::string* strerrorcode) {
  if (strerrorcode != nullptr) {
    
  } else {
    
  }
  strerrorcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strerrorcode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strerrorcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strerrorcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strErrorCode)
}

// string strVersion = 2;
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::clear_strversion() {
  strversion_.ClearToEmpty();
}
inline const std::string& sNetworkData_eMI_S2C_LOGIN_RESULT::strversion() const {
  // @@protoc_insertion_point(field_get:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strVersion)
  return _internal_strversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sNetworkData_eMI_S2C_LOGIN_RESULT::set_strversion(ArgT0&& arg0, ArgT... args) {
 
 strversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strVersion)
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::mutable_strversion() {
  std::string* _s = _internal_mutable_strversion();
  // @@protoc_insertion_point(field_mutable:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strVersion)
  return _s;
}
inline const std::string& sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_strversion() const {
  return strversion_.Get();
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_set_strversion(const std::string& value) {
  
  strversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_mutable_strversion() {
  
  return strversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::release_strversion() {
  // @@protoc_insertion_point(field_release:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strVersion)
  return strversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::set_allocated_strversion(std::string* strversion) {
  if (strversion != nullptr) {
    
  } else {
    
  }
  strversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strversion,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strversion_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strVersion)
}

// string strCurrency = 3;
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::clear_strcurrency() {
  strcurrency_.ClearToEmpty();
}
inline const std::string& sNetworkData_eMI_S2C_LOGIN_RESULT::strcurrency() const {
  // @@protoc_insertion_point(field_get:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strCurrency)
  return _internal_strcurrency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sNetworkData_eMI_S2C_LOGIN_RESULT::set_strcurrency(ArgT0&& arg0, ArgT... args) {
 
 strcurrency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strCurrency)
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::mutable_strcurrency() {
  std::string* _s = _internal_mutable_strcurrency();
  // @@protoc_insertion_point(field_mutable:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strCurrency)
  return _s;
}
inline const std::string& sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_strcurrency() const {
  return strcurrency_.Get();
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_set_strcurrency(const std::string& value) {
  
  strcurrency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_mutable_strcurrency() {
  
  return strcurrency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::release_strcurrency() {
  // @@protoc_insertion_point(field_release:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strCurrency)
  return strcurrency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::set_allocated_strcurrency(std::string* strcurrency) {
  if (strcurrency != nullptr) {
    
  } else {
    
  }
  strcurrency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strcurrency,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strcurrency_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strcurrency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strCurrency)
}

// int64 i64Money = 4;
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::clear_i64money() {
  i64money_ = int64_t{0};
}
inline int64_t sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_i64money() const {
  return i64money_;
}
inline int64_t sNetworkData_eMI_S2C_LOGIN_RESULT::i64money() const {
  // @@protoc_insertion_point(field_get:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.i64Money)
  return _internal_i64money();
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_set_i64money(int64_t value) {
  
  i64money_ = value;
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::set_i64money(int64_t value) {
  _internal_set_i64money(value);
  // @@protoc_insertion_point(field_set:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.i64Money)
}

// string strNote = 5;
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::clear_strnote() {
  strnote_.ClearToEmpty();
}
inline const std::string& sNetworkData_eMI_S2C_LOGIN_RESULT::strnote() const {
  // @@protoc_insertion_point(field_get:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strNote)
  return _internal_strnote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sNetworkData_eMI_S2C_LOGIN_RESULT::set_strnote(ArgT0&& arg0, ArgT... args) {
 
 strnote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strNote)
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::mutable_strnote() {
  std::string* _s = _internal_mutable_strnote();
  // @@protoc_insertion_point(field_mutable:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strNote)
  return _s;
}
inline const std::string& sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_strnote() const {
  return strnote_.Get();
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_set_strnote(const std::string& value) {
  
  strnote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_mutable_strnote() {
  
  return strnote_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sNetworkData_eMI_S2C_LOGIN_RESULT::release_strnote() {
  // @@protoc_insertion_point(field_release:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strNote)
  return strnote_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::set_allocated_strnote(std::string* strnote) {
  if (strnote != nullptr) {
    
  } else {
    
  }
  strnote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strnote,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strnote_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strnote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strNote)
}

// repeated int64 i64BetList = 6;
inline int sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_i64betlist_size() const {
  return i64betlist_.size();
}
inline int sNetworkData_eMI_S2C_LOGIN_RESULT::i64betlist_size() const {
  return _internal_i64betlist_size();
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::clear_i64betlist() {
  i64betlist_.Clear();
}
inline int64_t sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_i64betlist(int index) const {
  return i64betlist_.Get(index);
}
inline int64_t sNetworkData_eMI_S2C_LOGIN_RESULT::i64betlist(int index) const {
  // @@protoc_insertion_point(field_get:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.i64BetList)
  return _internal_i64betlist(index);
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::set_i64betlist(int index, int64_t value) {
  i64betlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.i64BetList)
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_add_i64betlist(int64_t value) {
  i64betlist_.Add(value);
}
inline void sNetworkData_eMI_S2C_LOGIN_RESULT::add_i64betlist(int64_t value) {
  _internal_add_i64betlist(value);
  // @@protoc_insertion_point(field_add:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.i64BetList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_i64betlist() const {
  return i64betlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
sNetworkData_eMI_S2C_LOGIN_RESULT::i64betlist() const {
  // @@protoc_insertion_point(field_list:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.i64BetList)
  return _internal_i64betlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
sNetworkData_eMI_S2C_LOGIN_RESULT::_internal_mutable_i64betlist() {
  return &i64betlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
sNetworkData_eMI_S2C_LOGIN_RESULT::mutable_i64betlist() {
  // @@protoc_insertion_point(field_mutable_list:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.i64BetList)
  return _internal_mutable_i64betlist();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MessageTest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageTest::eMessageID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageTest::eMessageID>() {
  return ::MessageTest::eMessageID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageTest_2eproto
