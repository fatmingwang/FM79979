// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTest.proto

#include "MessageTest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace MessageTest {
constexpr MyMessage::MyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MyMessageDefaultTypeInternal {
  constexpr MyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MyMessageDefaultTypeInternal() {}
  union {
    MyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MyMessageDefaultTypeInternal _MyMessage_default_instance_;
constexpr sNetworkData_eMI_C2S_LOGIN_REQUEST::sNetworkData_eMI_C2S_LOGIN_REQUEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strgameid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strauth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct sNetworkData_eMI_C2S_LOGIN_REQUESTDefaultTypeInternal {
  constexpr sNetworkData_eMI_C2S_LOGIN_REQUESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sNetworkData_eMI_C2S_LOGIN_REQUESTDefaultTypeInternal() {}
  union {
    sNetworkData_eMI_C2S_LOGIN_REQUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sNetworkData_eMI_C2S_LOGIN_REQUESTDefaultTypeInternal _sNetworkData_eMI_C2S_LOGIN_REQUEST_default_instance_;
constexpr sNetworkData_eMI_S2C_LOGIN_RESULT::sNetworkData_eMI_S2C_LOGIN_RESULT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : i64betlist_()
  , _i64betlist_cached_byte_size_(0)
  , strerrorcode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strcurrency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strnote_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , i64money_(int64_t{0}){}
struct sNetworkData_eMI_S2C_LOGIN_RESULTDefaultTypeInternal {
  constexpr sNetworkData_eMI_S2C_LOGIN_RESULTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sNetworkData_eMI_S2C_LOGIN_RESULTDefaultTypeInternal() {}
  union {
    sNetworkData_eMI_S2C_LOGIN_RESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sNetworkData_eMI_S2C_LOGIN_RESULTDefaultTypeInternal _sNetworkData_eMI_S2C_LOGIN_RESULT_default_instance_;
}  // namespace MessageTest
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MessageTest_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MessageTest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MessageTest_2eproto = nullptr;

const uint32_t TableStruct_MessageTest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageTest::MyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_C2S_LOGIN_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_C2S_LOGIN_REQUEST, strgameid_),
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_C2S_LOGIN_REQUEST, strauth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT, strerrorcode_),
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT, strversion_),
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT, strcurrency_),
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT, i64money_),
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT, strnote_),
  PROTOBUF_FIELD_OFFSET(::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT, i64betlist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MessageTest::MyMessage)},
  { 6, -1, -1, sizeof(::MessageTest::sNetworkData_eMI_C2S_LOGIN_REQUEST)},
  { 14, -1, -1, sizeof(::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MessageTest::_MyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MessageTest::_sNetworkData_eMI_C2S_LOGIN_REQUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MessageTest::_sNetworkData_eMI_S2C_LOGIN_RESULT_default_instance_),
};

const char descriptor_table_protodef_MessageTest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021MessageTest.proto\022\013MessageTest\032 google"
  "/protobuf/descriptor.proto\"\035\n\tMyMessage:"
  "\020\222\202\031\014Hello world!\"H\n\"sNetworkData_eMI_C2"
  "S_LOGIN_REQUEST\022\021\n\tstrGameID\030\001 \001(\t\022\017\n\007st"
  "rAuth\030\002 \001(\t\"\231\001\n!sNetworkData_eMI_S2C_LOG"
  "IN_RESULT\022\024\n\014strErrorCode\030\001 \001(\t\022\022\n\nstrVe"
  "rsion\030\002 \001(\t\022\023\n\013strCurrency\030\003 \001(\t\022\020\n\010i64M"
  "oney\030\004 \001(\003\022\017\n\007strNote\030\005 \001(\t\022\022\n\ni64BetLis"
  "t\030\006 \003(\003*N\n\neMessageID\022\031\n\025eMI_C2S_LOGIN_R"
  "EQUEST\020\000\022\030\n\024eMI_S2C_LOGIN_RESULT\020\001\022\013\n\007eM"
  "I_MAX\020\003:7\n\tmy_option\022\037.google.protobuf.M"
  "essageOptions\030\242\220\003 \001(\t\210\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MessageTest_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MessageTest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageTest_2eproto = {
  false, false, 472, descriptor_table_protodef_MessageTest_2eproto, "MessageTest.proto", 
  &descriptor_table_MessageTest_2eproto_once, descriptor_table_MessageTest_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_MessageTest_2eproto::offsets,
  file_level_metadata_MessageTest_2eproto, file_level_enum_descriptors_MessageTest_2eproto, file_level_service_descriptors_MessageTest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MessageTest_2eproto_getter() {
  return &descriptor_table_MessageTest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MessageTest_2eproto(&descriptor_table_MessageTest_2eproto);
namespace MessageTest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eMessageID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageTest_2eproto);
  return file_level_enum_descriptors_MessageTest_2eproto[0];
}
bool eMessageID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MyMessage::_Internal {
 public:
};

MyMessage::MyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:MessageTest.MyMessage)
}
MyMessage::MyMessage(const MyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MessageTest.MyMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MessageTest_2eproto_getter, &descriptor_table_MessageTest_2eproto_once,
      file_level_metadata_MessageTest_2eproto[0]);
}

// ===================================================================

class sNetworkData_eMI_C2S_LOGIN_REQUEST::_Internal {
 public:
};

sNetworkData_eMI_C2S_LOGIN_REQUEST::sNetworkData_eMI_C2S_LOGIN_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
}
sNetworkData_eMI_C2S_LOGIN_REQUEST::sNetworkData_eMI_C2S_LOGIN_REQUEST(const sNetworkData_eMI_C2S_LOGIN_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strgameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strgameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strgameid().empty()) {
    strgameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strgameid(), 
      GetArenaForAllocation());
  }
  strauth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strauth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strauth().empty()) {
    strauth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strauth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
}

inline void sNetworkData_eMI_C2S_LOGIN_REQUEST::SharedCtor() {
strgameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strgameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
strauth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strauth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

sNetworkData_eMI_C2S_LOGIN_REQUEST::~sNetworkData_eMI_C2S_LOGIN_REQUEST() {
  // @@protoc_insertion_point(destructor:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void sNetworkData_eMI_C2S_LOGIN_REQUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strgameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strauth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sNetworkData_eMI_C2S_LOGIN_REQUEST::ArenaDtor(void* object) {
  sNetworkData_eMI_C2S_LOGIN_REQUEST* _this = reinterpret_cast< sNetworkData_eMI_C2S_LOGIN_REQUEST* >(object);
  (void)_this;
}
void sNetworkData_eMI_C2S_LOGIN_REQUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sNetworkData_eMI_C2S_LOGIN_REQUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sNetworkData_eMI_C2S_LOGIN_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strgameid_.ClearToEmpty();
  strauth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sNetworkData_eMI_C2S_LOGIN_REQUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string strGameID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strgameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strGameID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strAuth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strauth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strAuth"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* sNetworkData_eMI_C2S_LOGIN_REQUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string strGameID = 1;
  if (!this->_internal_strgameid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strgameid().data(), static_cast<int>(this->_internal_strgameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strGameID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strgameid(), target);
  }

  // string strAuth = 2;
  if (!this->_internal_strauth().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strauth().data(), static_cast<int>(this->_internal_strauth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST.strAuth");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strauth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
  return target;
}

size_t sNetworkData_eMI_C2S_LOGIN_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strGameID = 1;
  if (!this->_internal_strgameid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strgameid());
  }

  // string strAuth = 2;
  if (!this->_internal_strauth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strauth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sNetworkData_eMI_C2S_LOGIN_REQUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    sNetworkData_eMI_C2S_LOGIN_REQUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sNetworkData_eMI_C2S_LOGIN_REQUEST::GetClassData() const { return &_class_data_; }

void sNetworkData_eMI_C2S_LOGIN_REQUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<sNetworkData_eMI_C2S_LOGIN_REQUEST *>(to)->MergeFrom(
      static_cast<const sNetworkData_eMI_C2S_LOGIN_REQUEST &>(from));
}


void sNetworkData_eMI_C2S_LOGIN_REQUEST::MergeFrom(const sNetworkData_eMI_C2S_LOGIN_REQUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strgameid().empty()) {
    _internal_set_strgameid(from._internal_strgameid());
  }
  if (!from._internal_strauth().empty()) {
    _internal_set_strauth(from._internal_strauth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sNetworkData_eMI_C2S_LOGIN_REQUEST::CopyFrom(const sNetworkData_eMI_C2S_LOGIN_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageTest.sNetworkData_eMI_C2S_LOGIN_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sNetworkData_eMI_C2S_LOGIN_REQUEST::IsInitialized() const {
  return true;
}

void sNetworkData_eMI_C2S_LOGIN_REQUEST::InternalSwap(sNetworkData_eMI_C2S_LOGIN_REQUEST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strgameid_, lhs_arena,
      &other->strgameid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strauth_, lhs_arena,
      &other->strauth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata sNetworkData_eMI_C2S_LOGIN_REQUEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MessageTest_2eproto_getter, &descriptor_table_MessageTest_2eproto_once,
      file_level_metadata_MessageTest_2eproto[1]);
}

// ===================================================================

class sNetworkData_eMI_S2C_LOGIN_RESULT::_Internal {
 public:
};

sNetworkData_eMI_S2C_LOGIN_RESULT::sNetworkData_eMI_S2C_LOGIN_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  i64betlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
}
sNetworkData_eMI_S2C_LOGIN_RESULT::sNetworkData_eMI_S2C_LOGIN_RESULT(const sNetworkData_eMI_S2C_LOGIN_RESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      i64betlist_(from.i64betlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strerrorcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strerrorcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strerrorcode().empty()) {
    strerrorcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strerrorcode(), 
      GetArenaForAllocation());
  }
  strversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strversion().empty()) {
    strversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strversion(), 
      GetArenaForAllocation());
  }
  strcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strcurrency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strcurrency().empty()) {
    strcurrency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strcurrency(), 
      GetArenaForAllocation());
  }
  strnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strnote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strnote().empty()) {
    strnote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strnote(), 
      GetArenaForAllocation());
  }
  i64money_ = from.i64money_;
  // @@protoc_insertion_point(copy_constructor:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
}

inline void sNetworkData_eMI_S2C_LOGIN_RESULT::SharedCtor() {
strerrorcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strerrorcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
strversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
strcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strcurrency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
strnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strnote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
i64money_ = int64_t{0};
}

sNetworkData_eMI_S2C_LOGIN_RESULT::~sNetworkData_eMI_S2C_LOGIN_RESULT() {
  // @@protoc_insertion_point(destructor:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void sNetworkData_eMI_S2C_LOGIN_RESULT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strerrorcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strnote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sNetworkData_eMI_S2C_LOGIN_RESULT::ArenaDtor(void* object) {
  sNetworkData_eMI_S2C_LOGIN_RESULT* _this = reinterpret_cast< sNetworkData_eMI_S2C_LOGIN_RESULT* >(object);
  (void)_this;
}
void sNetworkData_eMI_S2C_LOGIN_RESULT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sNetworkData_eMI_S2C_LOGIN_RESULT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sNetworkData_eMI_S2C_LOGIN_RESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i64betlist_.Clear();
  strerrorcode_.ClearToEmpty();
  strversion_.ClearToEmpty();
  strcurrency_.ClearToEmpty();
  strnote_.ClearToEmpty();
  i64money_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sNetworkData_eMI_S2C_LOGIN_RESULT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string strErrorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strerrorcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strErrorCode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strVersion"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strCurrency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_strcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strCurrency"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 i64Money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          i64money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strNote = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_strnote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strNote"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 i64BetList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_i64betlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_i64betlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* sNetworkData_eMI_S2C_LOGIN_RESULT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string strErrorCode = 1;
  if (!this->_internal_strerrorcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strerrorcode().data(), static_cast<int>(this->_internal_strerrorcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strErrorCode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strerrorcode(), target);
  }

  // string strVersion = 2;
  if (!this->_internal_strversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strversion().data(), static_cast<int>(this->_internal_strversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strversion(), target);
  }

  // string strCurrency = 3;
  if (!this->_internal_strcurrency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strcurrency().data(), static_cast<int>(this->_internal_strcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strCurrency");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strcurrency(), target);
  }

  // int64 i64Money = 4;
  if (this->_internal_i64money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_i64money(), target);
  }

  // string strNote = 5;
  if (!this->_internal_strnote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strnote().data(), static_cast<int>(this->_internal_strnote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT.strNote");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strnote(), target);
  }

  // repeated int64 i64BetList = 6;
  {
    int byte_size = _i64betlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_i64betlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
  return target;
}

size_t sNetworkData_eMI_S2C_LOGIN_RESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 i64BetList = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->i64betlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _i64betlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string strErrorCode = 1;
  if (!this->_internal_strerrorcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strerrorcode());
  }

  // string strVersion = 2;
  if (!this->_internal_strversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strversion());
  }

  // string strCurrency = 3;
  if (!this->_internal_strcurrency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strcurrency());
  }

  // string strNote = 5;
  if (!this->_internal_strnote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strnote());
  }

  // int64 i64Money = 4;
  if (this->_internal_i64money() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_i64money());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sNetworkData_eMI_S2C_LOGIN_RESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    sNetworkData_eMI_S2C_LOGIN_RESULT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sNetworkData_eMI_S2C_LOGIN_RESULT::GetClassData() const { return &_class_data_; }

void sNetworkData_eMI_S2C_LOGIN_RESULT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<sNetworkData_eMI_S2C_LOGIN_RESULT *>(to)->MergeFrom(
      static_cast<const sNetworkData_eMI_S2C_LOGIN_RESULT &>(from));
}


void sNetworkData_eMI_S2C_LOGIN_RESULT::MergeFrom(const sNetworkData_eMI_S2C_LOGIN_RESULT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  i64betlist_.MergeFrom(from.i64betlist_);
  if (!from._internal_strerrorcode().empty()) {
    _internal_set_strerrorcode(from._internal_strerrorcode());
  }
  if (!from._internal_strversion().empty()) {
    _internal_set_strversion(from._internal_strversion());
  }
  if (!from._internal_strcurrency().empty()) {
    _internal_set_strcurrency(from._internal_strcurrency());
  }
  if (!from._internal_strnote().empty()) {
    _internal_set_strnote(from._internal_strnote());
  }
  if (from._internal_i64money() != 0) {
    _internal_set_i64money(from._internal_i64money());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sNetworkData_eMI_S2C_LOGIN_RESULT::CopyFrom(const sNetworkData_eMI_S2C_LOGIN_RESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageTest.sNetworkData_eMI_S2C_LOGIN_RESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sNetworkData_eMI_S2C_LOGIN_RESULT::IsInitialized() const {
  return true;
}

void sNetworkData_eMI_S2C_LOGIN_RESULT::InternalSwap(sNetworkData_eMI_S2C_LOGIN_RESULT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  i64betlist_.InternalSwap(&other->i64betlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strerrorcode_, lhs_arena,
      &other->strerrorcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strversion_, lhs_arena,
      &other->strversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strcurrency_, lhs_arena,
      &other->strcurrency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strnote_, lhs_arena,
      &other->strnote_, rhs_arena
  );
  swap(i64money_, other->i64money_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sNetworkData_eMI_S2C_LOGIN_RESULT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MessageTest_2eproto_getter, &descriptor_table_MessageTest_2eproto_once,
      file_level_metadata_MessageTest_2eproto[2]);
}
const std::string my_option_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  my_option(kMyOptionFieldNumber, my_option_default);

// @@protoc_insertion_point(namespace_scope)
}  // namespace MessageTest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MessageTest::MyMessage* Arena::CreateMaybeMessage< ::MessageTest::MyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessageTest::MyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageTest::sNetworkData_eMI_C2S_LOGIN_REQUEST* Arena::CreateMaybeMessage< ::MessageTest::sNetworkData_eMI_C2S_LOGIN_REQUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessageTest::sNetworkData_eMI_C2S_LOGIN_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT* Arena::CreateMaybeMessage< ::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessageTest::sNetworkData_eMI_S2C_LOGIN_RESULT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
